import type { GetConsoleV1ExperimentsResponse } from '@/src/client/types.gen'

export const mockExperimentsV1Response: GetConsoleV1ExperimentsResponse = {
  message: 'Success',
  data: [
    {
      id: 'experiment-1',
      name: 'checkout_flow_experiment',
      description: 'Test experiment for checkout flow optimization',
      lastModifierId: 'user-1',
      lastModifiedTime: 1640995200000,
      lastModifierEmail: 'user1@example.com',
      lastModifierName: 'User One',
      createdTime: 1640995200000,
      creatorName: 'User One',
      status: 'active',
      startTime: 1640995200000,
      endTime: 1672531200000,
      allocation: 50,
      hypothesis: 'New checkout flow will increase conversion rate by 15%',
      groups: [
        {
          id: 'control',
          name: 'Control Group',
          size: 50,
          parameterValues: {},
        },
        {
          id: 'treatment',
          name: 'Treatment Group',
          size: 50,
          parameterValues: {
            new_checkout_enabled: true,
            checkout_theme: 'modern',
          },
        },
      ],
      controlGroupID: 'control',
      assignmentSourceFilters: [],
      idType: 'user',
      tags: ['checkout', 'conversion'],
      primaryMetrics: [
        {
          name: 'conversion_rate',
          type: 'count',
          direction: 'increase',
        },
      ],
      secondaryMetrics: [
        {
          name: 'average_order_value',
          type: 'sum',
          direction: 'increase',
        },
        {
          name: 'cart_abandonment_rate',
          type: 'count',
          direction: 'decrease',
        },
      ],
      targetingGateId: null,
      bonferroniCorrection: false,
      defaultConfidenceInterval: '95',
      decisionReason: null,
      layerId: null,
      decisionTime: null,
      healthCheckStatus: 'PASSED',
    },
    {
      id: 'experiment-2',
      name: 'pricing_display_experiment',
      description: 'Test experiment for pricing display variations',
      lastModifierId: 'user-2',
      lastModifiedTime: 1640995200000,
      lastModifierEmail: 'user2@example.com',
      lastModifierName: 'User Two',
      createdTime: 1640995200000,
      creatorName: 'User Two',
      status: 'setup',
      startTime: 1640995200000,
      endTime: 1672531200000,
      allocation: 25,
      hypothesis: 'Showing discounted prices will increase purchase intent',
      groups: [
        {
          id: 'control',
          name: 'Control Group',
          size: 50,
          parameterValues: {},
        },
        {
          id: 'discount_highlight',
          name: 'Discount Highlight',
          size: 50,
          parameterValues: {
            show_discount: true,
            discount_style: 'highlight',
          },
        },
      ],
      controlGroupID: 'control',
      assignmentSourceFilters: [],
      idType: 'user',
      tags: ['pricing', 'display'],
      primaryMetrics: [
        {
          name: 'purchase_intent',
          type: 'count',
          direction: 'increase',
        },
      ],
      secondaryMetrics: [
        {
          name: 'time_on_page',
          type: 'sum',
          direction: 'increase',
        },
      ],
      targetingGateId: null,
      bonferroniCorrection: false,
      defaultConfidenceInterval: '95',
      decisionReason: null,
      layerId: null,
      decisionTime: null,
      healthCheckStatus: 'PASSED',
    },
    {
      id: 'experiment-3',
      name: 'onboarding_flow_experiment',
      description: 'Test experiment for user onboarding optimization',
      lastModifierId: 'user-3',
      lastModifiedTime: 1640995200000,
      lastModifierEmail: 'user3@example.com',
      lastModifierName: 'User Three',
      createdTime: 1640995200000,
      creatorName: 'User Three',
      status: 'active',
      startTime: 1640995200000,
      endTime: 1672531200000,
      allocation: 75,
      hypothesis: 'Simplified onboarding will reduce drop-off rate',
      groups: [
        {
          id: 'control',
          name: 'Control Group',
          size: 33,
          parameterValues: {},
        },
        {
          id: 'simplified',
          name: 'Simplified Flow',
          size: 33,
          parameterValues: {
            onboarding_steps: 3,
            skip_optional_fields: true,
          },
        },
        {
          id: 'guided',
          name: 'Guided Flow',
          size: 34,
          parameterValues: {
            onboarding_steps: 5,
            show_tooltips: true,
            progress_indicator: true,
          },
        },
      ],
      controlGroupID: 'control',
      assignmentSourceFilters: [],
      idType: 'user',
      tags: ['onboarding', 'user_experience'],
      primaryMetrics: [
        {
          name: 'drop_off_rate',
          type: 'count',
          direction: 'decrease',
        },
      ],
      secondaryMetrics: [
        {
          name: 'completion_time',
          type: 'sum',
          direction: 'decrease',
        },
      ],
      targetingGateId: null,
      bonferroniCorrection: false,
      defaultConfidenceInterval: '95',
      decisionReason: null,
      layerId: null,
      decisionTime: null,
      healthCheckStatus: 'PASSED',
    },
  ],
  pagination: {
    itemsPerPage: 10,
    pageNumber: 1,
    totalItems: 3,
    nextPage: null,
    previousPage: null,
    all: '/url/experiments',
  },
}

export const mockEmptyExperimentsResponse: GetConsoleV1ExperimentsResponse = {
  message: 'Success',
  data: [],
  pagination: {
    itemsPerPage: 10,
    pageNumber: 1,
    totalItems: 0,
    nextPage: null,
    previousPage: null,
    all: '/url/experiments',
  },
}
