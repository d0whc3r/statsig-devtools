// This file is auto-generated by @hey-api/openapi-ts

import { client as _heyApiClient } from './client.gen'

import type { Client, Options as ClientOptions, TDataShape } from './client'
import type {
  DeleteConsoleV1AutotunesByIdData,
  DeleteConsoleV1AutotunesByIdErrors,
  DeleteConsoleV1AutotunesByIdResponses,
  DeleteConsoleV1DynamicConfigsByIdData,
  DeleteConsoleV1DynamicConfigsByIdErrors,
  DeleteConsoleV1DynamicConfigsByIdResponses,
  DeleteConsoleV1DynamicConfigsByIdRuleByRuleIdData,
  DeleteConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
  DeleteConsoleV1ExperimentsAssignmentSourceByNameData,
  DeleteConsoleV1ExperimentsAssignmentSourceByNameResponses,
  DeleteConsoleV1ExperimentsByIdData,
  DeleteConsoleV1ExperimentsByIdErrors,
  DeleteConsoleV1ExperimentsByIdOverridesData,
  DeleteConsoleV1ExperimentsByIdOverridesErrors,
  DeleteConsoleV1ExperimentsByIdOverridesResponses,
  DeleteConsoleV1ExperimentsByIdResponses,
  DeleteConsoleV1ExperimentsEntityPropertyByNameData,
  DeleteConsoleV1ExperimentsEntityPropertyByNameErrors,
  DeleteConsoleV1ExperimentsEntityPropertyByNameResponses,
  DeleteConsoleV1ExperimentsQualifyingEventsByNameData,
  DeleteConsoleV1ExperimentsQualifyingEventsByNameErrors,
  DeleteConsoleV1ExperimentsQualifyingEventsByNameResponses,
  DeleteConsoleV1GatesByIdData,
  DeleteConsoleV1GatesByIdOverridesData,
  DeleteConsoleV1GatesByIdOverridesResponses,
  DeleteConsoleV1GatesByIdResponses,
  DeleteConsoleV1GatesByIdRulesByRuleIdData,
  DeleteConsoleV1GatesByIdRulesByRuleIdResponses,
  DeleteConsoleV1HoldoutsByIdData,
  DeleteConsoleV1HoldoutsByIdErrors,
  DeleteConsoleV1HoldoutsByIdOverridesData,
  DeleteConsoleV1HoldoutsByIdOverridesErrors,
  DeleteConsoleV1HoldoutsByIdOverridesResponses,
  DeleteConsoleV1HoldoutsByIdResponses,
  DeleteConsoleV1IngestionData,
  DeleteConsoleV1IngestionResponses,
  DeleteConsoleV1KeysByIdData,
  DeleteConsoleV1KeysByIdErrors,
  DeleteConsoleV1KeysByIdResponses,
  DeleteConsoleV1LayersByIdData,
  DeleteConsoleV1LayersByIdErrors,
  DeleteConsoleV1LayersByIdOverridesData,
  DeleteConsoleV1LayersByIdOverridesErrors,
  DeleteConsoleV1LayersByIdOverridesResponses,
  DeleteConsoleV1LayersByIdResponses,
  DeleteConsoleV1MetricsByIdData,
  DeleteConsoleV1MetricsByIdErrors,
  DeleteConsoleV1MetricsByIdResponses,
  DeleteConsoleV1MetricsMetricSourceByNameData,
  DeleteConsoleV1MetricsMetricSourceByNameErrors,
  DeleteConsoleV1MetricsMetricSourceByNameResponses,
  DeleteConsoleV1ReleasePipelinesByIdData,
  DeleteConsoleV1ReleasePipelinesByIdResponses,
  DeleteConsoleV1RolesByIdData,
  DeleteConsoleV1RolesByIdErrors,
  DeleteConsoleV1RolesByIdResponses,
  DeleteConsoleV1SegmentsByIdData,
  DeleteConsoleV1SegmentsByIdErrors,
  DeleteConsoleV1SegmentsByIdIdListData,
  DeleteConsoleV1SegmentsByIdIdListErrors,
  DeleteConsoleV1SegmentsByIdIdListResponses,
  DeleteConsoleV1SegmentsByIdResponses,
  DeleteConsoleV1TagsByIdData,
  DeleteConsoleV1TagsByIdResponses,
  DeleteConsoleV1TargetAppByIdData,
  DeleteConsoleV1TargetAppByIdResponses,
  DeleteConsoleV1UnitIdTypesByIdData,
  DeleteConsoleV1UnitIdTypesByIdErrors,
  DeleteConsoleV1UnitIdTypesByIdResponses,
  DeleteConsoleV1UsersTeamsByIdData,
  DeleteConsoleV1UsersTeamsByIdResponses,
  GetConsoleV1AlertsData,
  GetConsoleV1AlertsErrors,
  GetConsoleV1AlertsResponses,
  GetConsoleV1AuditLogsData,
  GetConsoleV1AuditLogsResponses,
  GetConsoleV1AutotunesByIdData,
  GetConsoleV1AutotunesByIdErrors,
  GetConsoleV1AutotunesByIdResponses,
  GetConsoleV1AutotunesData,
  GetConsoleV1AutotunesResponses,
  GetConsoleV1CompanyData,
  GetConsoleV1CompanyErrors,
  GetConsoleV1CompanyResponses,
  GetConsoleV1DynamicConfigsByIdData,
  GetConsoleV1DynamicConfigsByIdErrors,
  GetConsoleV1DynamicConfigsByIdResponses,
  GetConsoleV1DynamicConfigsByIdRuleByRuleIdData,
  GetConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
  GetConsoleV1DynamicConfigsByIdRulesData,
  GetConsoleV1DynamicConfigsByIdRulesResponses,
  GetConsoleV1DynamicConfigsByIdVersionsData,
  GetConsoleV1DynamicConfigsByIdVersionsErrors,
  GetConsoleV1DynamicConfigsByIdVersionsResponses,
  GetConsoleV1DynamicConfigsData,
  GetConsoleV1DynamicConfigsErrors,
  GetConsoleV1DynamicConfigsResponses,
  GetConsoleV1EnvironmentsData,
  GetConsoleV1EnvironmentsErrors,
  GetConsoleV1EnvironmentsResponses,
  GetConsoleV1EventsByEventNameData,
  GetConsoleV1EventsByEventNameErrors,
  GetConsoleV1EventsByEventNameMetricsData,
  GetConsoleV1EventsByEventNameMetricsErrors,
  GetConsoleV1EventsByEventNameMetricsResponses,
  GetConsoleV1EventsByEventNameResponses,
  GetConsoleV1EventsData,
  GetConsoleV1EventsErrors,
  GetConsoleV1EventsResponses,
  GetConsoleV1ExperimentsAssignmentSourcesData,
  GetConsoleV1ExperimentsAssignmentSourcesErrors,
  GetConsoleV1ExperimentsAssignmentSourcesResponses,
  GetConsoleV1ExperimentsByIdCumulativeExposuresData,
  GetConsoleV1ExperimentsByIdCumulativeExposuresResponses,
  GetConsoleV1ExperimentsByIdData,
  GetConsoleV1ExperimentsByIdErrors,
  GetConsoleV1ExperimentsByIdOverridesData,
  GetConsoleV1ExperimentsByIdOverridesErrors,
  GetConsoleV1ExperimentsByIdOverridesResponses,
  GetConsoleV1ExperimentsByIdPulseLoadHistoryData,
  GetConsoleV1ExperimentsByIdPulseLoadHistoryErrors,
  GetConsoleV1ExperimentsByIdPulseLoadHistoryResponses,
  GetConsoleV1ExperimentsByIdPulseResultsData,
  GetConsoleV1ExperimentsByIdPulseResultsResponses,
  GetConsoleV1ExperimentsByIdResponses,
  GetConsoleV1ExperimentsData,
  GetConsoleV1ExperimentsEntityPropertiesData,
  GetConsoleV1ExperimentsEntityPropertiesErrors,
  GetConsoleV1ExperimentsEntityPropertiesResponses,
  GetConsoleV1ExperimentsEntityPropertyByNameData,
  GetConsoleV1ExperimentsEntityPropertyByNameErrors,
  GetConsoleV1ExperimentsEntityPropertyByNameResponses,
  GetConsoleV1ExperimentsErrors,
  GetConsoleV1ExperimentsQualifyingEventsByNameData,
  GetConsoleV1ExperimentsQualifyingEventsByNameErrors,
  GetConsoleV1ExperimentsQualifyingEventsByNameResponses,
  GetConsoleV1ExperimentsQualifyingEventsData,
  GetConsoleV1ExperimentsQualifyingEventsErrors,
  GetConsoleV1ExperimentsQualifyingEventsResponses,
  GetConsoleV1ExperimentsResponses,
  GetConsoleV1ExposureCountData,
  GetConsoleV1ExposureCountErrors,
  GetConsoleV1ExposureCountResponses,
  GetConsoleV1GatesByIdData,
  GetConsoleV1GatesByIdOverridesData,
  GetConsoleV1GatesByIdOverridesResponses,
  GetConsoleV1GatesByIdResponses,
  GetConsoleV1GatesByIdRulesByRuleIdPulseLoadHistoryData,
  GetConsoleV1GatesByIdRulesByRuleIdPulseLoadHistoryResponses,
  GetConsoleV1GatesByIdRulesByRuleIdPulseResultsData,
  GetConsoleV1GatesByIdRulesByRuleIdPulseResultsResponses,
  GetConsoleV1GatesByIdRulesData,
  GetConsoleV1GatesByIdRulesResponses,
  GetConsoleV1GatesByIdVersionsData,
  GetConsoleV1GatesByIdVersionsErrors,
  GetConsoleV1GatesByIdVersionsResponses,
  GetConsoleV1GatesData,
  GetConsoleV1GatesErrors,
  GetConsoleV1GatesResponses,
  GetConsoleV1HoldoutsByIdData,
  GetConsoleV1HoldoutsByIdErrors,
  GetConsoleV1HoldoutsByIdOverridesData,
  GetConsoleV1HoldoutsByIdOverridesErrors,
  GetConsoleV1HoldoutsByIdOverridesResponses,
  GetConsoleV1HoldoutsByIdPulseResultsData,
  GetConsoleV1HoldoutsByIdPulseResultsResponses,
  GetConsoleV1HoldoutsByIdResponses,
  GetConsoleV1HoldoutsData,
  GetConsoleV1HoldoutsErrors,
  GetConsoleV1HoldoutsResponses,
  GetConsoleV1IngestionData,
  GetConsoleV1IngestionEventsCountData,
  GetConsoleV1IngestionEventsCountResponses,
  GetConsoleV1IngestionEventsDeltaData,
  GetConsoleV1IngestionEventsDeltaResponses,
  GetConsoleV1IngestionResponses,
  GetConsoleV1IngestionRunsByIdData,
  GetConsoleV1IngestionRunsByIdErrors,
  GetConsoleV1IngestionRunsByIdResponses,
  GetConsoleV1IngestionRunsData,
  GetConsoleV1IngestionRunsResponses,
  GetConsoleV1IngestionScheduleData,
  GetConsoleV1IngestionScheduleResponses,
  GetConsoleV1IngestionStatusData,
  GetConsoleV1IngestionStatusErrors,
  GetConsoleV1IngestionStatusResponses,
  GetConsoleV1KeysByIdData,
  GetConsoleV1KeysByIdErrors,
  GetConsoleV1KeysByIdResponses,
  GetConsoleV1KeysData,
  GetConsoleV1KeysErrors,
  GetConsoleV1KeysResponses,
  GetConsoleV1LayersByIdData,
  GetConsoleV1LayersByIdErrors,
  GetConsoleV1LayersByIdExperimentsData,
  GetConsoleV1LayersByIdExperimentsResponses,
  GetConsoleV1LayersByIdOverridesData,
  GetConsoleV1LayersByIdOverridesErrors,
  GetConsoleV1LayersByIdOverridesResponses,
  GetConsoleV1LayersByIdResponses,
  GetConsoleV1LayersData,
  GetConsoleV1LayersErrors,
  GetConsoleV1LayersResponses,
  GetConsoleV1MetricsByIdData,
  GetConsoleV1MetricsByIdErrors,
  GetConsoleV1MetricsByIdExperimentsData,
  GetConsoleV1MetricsByIdExperimentsErrors,
  GetConsoleV1MetricsByIdExperimentsResponses,
  GetConsoleV1MetricsByIdResponses,
  GetConsoleV1MetricsData,
  GetConsoleV1MetricsErrors,
  GetConsoleV1MetricsListData,
  GetConsoleV1MetricsListErrors,
  GetConsoleV1MetricsListResponses,
  GetConsoleV1MetricsMetricSourceByNameData,
  GetConsoleV1MetricsMetricSourceByNameErrors,
  GetConsoleV1MetricsMetricSourceByNameMetricsData,
  GetConsoleV1MetricsMetricSourceByNameMetricsErrors,
  GetConsoleV1MetricsMetricSourceByNameMetricsResponses,
  GetConsoleV1MetricsMetricSourceByNameResponses,
  GetConsoleV1MetricsMetricSourceListData,
  GetConsoleV1MetricsMetricSourceListErrors,
  GetConsoleV1MetricsMetricSourceListResponses,
  GetConsoleV1MetricsResponses,
  GetConsoleV1MetricsValuesData,
  GetConsoleV1MetricsValuesErrors,
  GetConsoleV1MetricsValuesResponses,
  GetConsoleV1ParamStoresByNameData,
  GetConsoleV1ParamStoresByNameResponses,
  GetConsoleV1ParamStoresData,
  GetConsoleV1ParamStoresResponses,
  GetConsoleV1ProjectData,
  GetConsoleV1ProjectResponses,
  GetConsoleV1ProjectUsageBillingReportData,
  GetConsoleV1ProjectUsageBillingReportErrors,
  GetConsoleV1ProjectUsageBillingReportResponses,
  GetConsoleV1ReleasePipelinesByIdData,
  GetConsoleV1ReleasePipelinesByIdResponses,
  GetConsoleV1ReleasePipelinesData,
  GetConsoleV1ReleasePipelinesResponses,
  GetConsoleV1ReleasePipelineTriggersByIdData,
  GetConsoleV1ReleasePipelineTriggersByIdResponses,
  GetConsoleV1ReleasePipelineTriggersData,
  GetConsoleV1ReleasePipelineTriggersResponses,
  GetConsoleV1ReportsData,
  GetConsoleV1ReportsErrors,
  GetConsoleV1ReportsResponses,
  GetConsoleV1RolesByIdData,
  GetConsoleV1RolesByIdErrors,
  GetConsoleV1RolesByIdResponses,
  GetConsoleV1RolesData,
  GetConsoleV1RolesErrors,
  GetConsoleV1RolesResponses,
  GetConsoleV1SegmentsByIdData,
  GetConsoleV1SegmentsByIdErrors,
  GetConsoleV1SegmentsByIdIdListData,
  GetConsoleV1SegmentsByIdIdlistMetadataData,
  GetConsoleV1SegmentsByIdIdlistMetadataResponses,
  GetConsoleV1SegmentsByIdIdListResponses,
  GetConsoleV1SegmentsByIdResponses,
  GetConsoleV1SegmentsData,
  GetConsoleV1SegmentsErrors,
  GetConsoleV1SegmentsResponses,
  GetConsoleV1SettingsProjectData,
  GetConsoleV1SettingsProjectErrors,
  GetConsoleV1SettingsProjectResponses,
  GetConsoleV1SettingsReviewsData,
  GetConsoleV1SettingsReviewsErrors,
  GetConsoleV1SettingsReviewsResponses,
  GetConsoleV1SettingsRolesData,
  GetConsoleV1SettingsRolesErrors,
  GetConsoleV1SettingsRolesResponses,
  GetConsoleV1SettingsTeamsData,
  GetConsoleV1SettingsTeamsErrors,
  GetConsoleV1SettingsTeamsResponses,
  GetConsoleV1TagsByIdData,
  GetConsoleV1TagsByIdErrors,
  GetConsoleV1TagsByIdResponses,
  GetConsoleV1TagsData,
  GetConsoleV1TagsErrors,
  GetConsoleV1TagsResponses,
  GetConsoleV1TargetAppByIdData,
  GetConsoleV1TargetAppByIdErrors,
  GetConsoleV1TargetAppByIdResponses,
  GetConsoleV1TargetAppData,
  GetConsoleV1TargetAppErrors,
  GetConsoleV1TargetAppResponses,
  GetConsoleV1UnitIdTypesByIdData,
  GetConsoleV1UnitIdTypesByIdErrors,
  GetConsoleV1UnitIdTypesByIdResponses,
  GetConsoleV1UnitIdTypesData,
  GetConsoleV1UnitIdTypesErrors,
  GetConsoleV1UnitIdTypesResponses,
  GetConsoleV1UsersByEmailData,
  GetConsoleV1UsersByEmailErrors,
  GetConsoleV1UsersByEmailResponses,
  GetConsoleV1UsersData,
  GetConsoleV1UsersErrors,
  GetConsoleV1UsersResponses,
  GetConsoleV1UsersTeamsByIdData,
  GetConsoleV1UsersTeamsByIdErrors,
  GetConsoleV1UsersTeamsByIdResponses,
  GetConsoleV1UsersTeamsData,
  GetConsoleV1UsersTeamsErrors,
  GetConsoleV1UsersTeamsResponses,
  PatchConsoleV1AutotunesByIdData,
  PatchConsoleV1AutotunesByIdErrors,
  PatchConsoleV1AutotunesByIdResponses,
  PatchConsoleV1ChangeValidationMessageData,
  PatchConsoleV1ChangeValidationMessageResponses,
  PatchConsoleV1DynamicConfigsByIdData,
  PatchConsoleV1DynamicConfigsByIdErrors,
  PatchConsoleV1DynamicConfigsByIdResponses,
  PatchConsoleV1DynamicConfigsByIdRuleByRuleIdData,
  PatchConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
  PatchConsoleV1ExperimentsAssignmentSourceByNameData,
  PatchConsoleV1ExperimentsAssignmentSourceByNameErrors,
  PatchConsoleV1ExperimentsAssignmentSourceByNameResponses,
  PatchConsoleV1ExperimentsByIdData,
  PatchConsoleV1ExperimentsByIdErrors,
  PatchConsoleV1ExperimentsByIdOverridesData,
  PatchConsoleV1ExperimentsByIdOverridesErrors,
  PatchConsoleV1ExperimentsByIdOverridesResponses,
  PatchConsoleV1ExperimentsByIdResponses,
  PatchConsoleV1ExperimentsEntityPropertyByNameData,
  PatchConsoleV1ExperimentsEntityPropertyByNameErrors,
  PatchConsoleV1ExperimentsEntityPropertyByNameResponses,
  PatchConsoleV1GatesByIdData,
  PatchConsoleV1GatesByIdOverridesData,
  PatchConsoleV1GatesByIdOverridesResponses,
  PatchConsoleV1GatesByIdResponses,
  PatchConsoleV1GatesByIdRulesByRuleIdData,
  PatchConsoleV1GatesByIdRulesByRuleIdResponses,
  PatchConsoleV1GatesByIdRulesData,
  PatchConsoleV1GatesByIdRulesResponses,
  PatchConsoleV1HoldoutsByIdData,
  PatchConsoleV1HoldoutsByIdErrors,
  PatchConsoleV1HoldoutsByIdOverridesData,
  PatchConsoleV1HoldoutsByIdOverridesResponses,
  PatchConsoleV1HoldoutsByIdResponses,
  PatchConsoleV1IngestionData,
  PatchConsoleV1IngestionResponses,
  PatchConsoleV1KeysByIdData,
  PatchConsoleV1KeysByIdDeactivateData,
  PatchConsoleV1KeysByIdDeactivateErrors,
  PatchConsoleV1KeysByIdDeactivateResponses,
  PatchConsoleV1KeysByIdErrors,
  PatchConsoleV1KeysByIdResponses,
  PatchConsoleV1KeysByIdRotateData,
  PatchConsoleV1KeysByIdRotateErrors,
  PatchConsoleV1KeysByIdRotateResponses,
  PatchConsoleV1LayersByIdData,
  PatchConsoleV1LayersByIdErrors,
  PatchConsoleV1LayersByIdOverridesData,
  PatchConsoleV1LayersByIdOverridesErrors,
  PatchConsoleV1LayersByIdOverridesResponses,
  PatchConsoleV1LayersByIdResponses,
  PatchConsoleV1RolesByIdData,
  PatchConsoleV1RolesByIdErrors,
  PatchConsoleV1RolesByIdResponses,
  PatchConsoleV1SegmentsByIdAddIdsData,
  PatchConsoleV1SegmentsByIdAddIdsErrors,
  PatchConsoleV1SegmentsByIdAddIdsResponses,
  PatchConsoleV1SegmentsByIdIdListData,
  PatchConsoleV1SegmentsByIdIdListErrors,
  PatchConsoleV1SegmentsByIdIdListResponses,
  PatchConsoleV1SegmentsByIdRemoveIdsData,
  PatchConsoleV1SegmentsByIdRemoveIdsErrors,
  PatchConsoleV1SegmentsByIdRemoveIdsResponses,
  PatchConsoleV1TagsByIdData,
  PatchConsoleV1TagsByIdResponses,
  PatchConsoleV1TargetAppByIdData,
  PatchConsoleV1TargetAppByIdErrors,
  PatchConsoleV1TargetAppByIdResponses,
  PatchConsoleV1TargetAppData,
  PatchConsoleV1TargetAppErrors,
  PatchConsoleV1TargetAppResponses,
  PatchConsoleV1UnitIdTypesByIdData,
  PatchConsoleV1UnitIdTypesByIdErrors,
  PatchConsoleV1UnitIdTypesByIdResponses,
  PatchConsoleV1UsersTeamsByIdData,
  PatchConsoleV1UsersTeamsByIdErrors,
  PatchConsoleV1UsersTeamsByIdResponses,
  PatchConsoleV1WhConnectionsData,
  PatchConsoleV1WhConnectionsErrors,
  PatchConsoleV1WhConnectionsResponses,
  PostConsoleV1AutotunesByIdData,
  PostConsoleV1AutotunesByIdErrors,
  PostConsoleV1AutotunesByIdResponses,
  PostConsoleV1AutotunesData,
  PostConsoleV1AutotunesErrors,
  PostConsoleV1AutotunesResponses,
  PostConsoleV1ChangeValidationData,
  PostConsoleV1ChangeValidationResponses,
  PostConsoleV1DynamicConfigsByIdData,
  PostConsoleV1DynamicConfigsByIdErrors,
  PostConsoleV1DynamicConfigsByIdResponses,
  PostConsoleV1DynamicConfigsData,
  PostConsoleV1DynamicConfigsErrors,
  PostConsoleV1DynamicConfigsResponses,
  PostConsoleV1EnvironmentsData,
  PostConsoleV1EnvironmentsErrors,
  PostConsoleV1EnvironmentsResponses,
  PostConsoleV1ExperimentsAssignmentSourceByNameData,
  PostConsoleV1ExperimentsAssignmentSourceByNameErrors,
  PostConsoleV1ExperimentsAssignmentSourceByNameResponses,
  PostConsoleV1ExperimentsAssignmentSourcesData,
  PostConsoleV1ExperimentsAssignmentSourcesErrors,
  PostConsoleV1ExperimentsAssignmentSourcesResponses,
  PostConsoleV1ExperimentsByIdData,
  PostConsoleV1ExperimentsByIdDisableGroupsData,
  PostConsoleV1ExperimentsByIdDisableGroupsErrors,
  PostConsoleV1ExperimentsByIdDisableGroupsResponses,
  PostConsoleV1ExperimentsByIdEnableGroupsData,
  PostConsoleV1ExperimentsByIdEnableGroupsErrors,
  PostConsoleV1ExperimentsByIdEnableGroupsResponses,
  PostConsoleV1ExperimentsByIdErrors,
  PostConsoleV1ExperimentsByIdLoadPulseData,
  PostConsoleV1ExperimentsByIdLoadPulseErrors,
  PostConsoleV1ExperimentsByIdLoadPulseResponses,
  PostConsoleV1ExperimentsByIdOverridesData,
  PostConsoleV1ExperimentsByIdOverridesErrors,
  PostConsoleV1ExperimentsByIdOverridesResponses,
  PostConsoleV1ExperimentsByIdResponses,
  PostConsoleV1ExperimentsData,
  PostConsoleV1ExperimentsEntityPropertiesData,
  PostConsoleV1ExperimentsEntityPropertiesErrors,
  PostConsoleV1ExperimentsEntityPropertiesResponses,
  PostConsoleV1ExperimentsEntityPropertyByNameData,
  PostConsoleV1ExperimentsEntityPropertyByNameErrors,
  PostConsoleV1ExperimentsEntityPropertyByNameResponses,
  PostConsoleV1ExperimentsErrors,
  PostConsoleV1ExperimentsQualifyingEventsByNameData,
  PostConsoleV1ExperimentsQualifyingEventsByNameErrors,
  PostConsoleV1ExperimentsQualifyingEventsByNameResponses,
  PostConsoleV1ExperimentsQualifyingEventsData,
  PostConsoleV1ExperimentsQualifyingEventsErrors,
  PostConsoleV1ExperimentsQualifyingEventsResponses,
  PostConsoleV1ExperimentsResponses,
  PostConsoleV1GatesByIdData,
  PostConsoleV1GatesByIdLoadPulseData,
  PostConsoleV1GatesByIdLoadPulseResponses,
  PostConsoleV1GatesByIdOverridesData,
  PostConsoleV1GatesByIdOverridesResponses,
  PostConsoleV1GatesByIdResponses,
  PostConsoleV1GatesByIdRuleData,
  PostConsoleV1GatesByIdRuleResponses,
  PostConsoleV1GatesByIdRulesData,
  PostConsoleV1GatesByIdRulesResponses,
  PostConsoleV1GatesData,
  PostConsoleV1GatesResponses,
  PostConsoleV1HoldoutsByIdData,
  PostConsoleV1HoldoutsByIdErrors,
  PostConsoleV1HoldoutsByIdOverridesData,
  PostConsoleV1HoldoutsByIdOverridesErrors,
  PostConsoleV1HoldoutsByIdOverridesResponses,
  PostConsoleV1HoldoutsByIdResponses,
  PostConsoleV1HoldoutsData,
  PostConsoleV1HoldoutsErrors,
  PostConsoleV1HoldoutsResponses,
  PostConsoleV1IngestionBackfillData,
  PostConsoleV1IngestionBackfillErrors,
  PostConsoleV1IngestionBackfillResponses,
  PostConsoleV1IngestionConnectionDatabricksData,
  PostConsoleV1IngestionConnectionDatabricksResponses,
  PostConsoleV1IngestionData,
  PostConsoleV1IngestionErrors,
  PostConsoleV1IngestionResponses,
  PostConsoleV1IngestionScheduleData,
  PostConsoleV1IngestionScheduleResponses,
  PostConsoleV1KeysData,
  PostConsoleV1KeysErrors,
  PostConsoleV1KeysResponses,
  PostConsoleV1LayersByIdData,
  PostConsoleV1LayersByIdErrors,
  PostConsoleV1LayersByIdOverridesData,
  PostConsoleV1LayersByIdOverridesErrors,
  PostConsoleV1LayersByIdOverridesResponses,
  PostConsoleV1LayersByIdResponses,
  PostConsoleV1LayersData,
  PostConsoleV1LayersErrors,
  PostConsoleV1LayersResponses,
  PostConsoleV1MetricsByIdData,
  PostConsoleV1MetricsByIdErrors,
  PostConsoleV1MetricsByIdReloadData,
  PostConsoleV1MetricsByIdReloadErrors,
  PostConsoleV1MetricsByIdReloadResponses,
  PostConsoleV1MetricsByIdResponses,
  PostConsoleV1MetricsData,
  PostConsoleV1MetricsErrors,
  PostConsoleV1MetricsMetricSourceByNameData,
  PostConsoleV1MetricsMetricSourceByNameErrors,
  PostConsoleV1MetricsMetricSourceByNameResponses,
  PostConsoleV1MetricsMetricSourceData,
  PostConsoleV1MetricsMetricSourceErrors,
  PostConsoleV1MetricsMetricSourceResponses,
  PostConsoleV1MetricsResponses,
  PostConsoleV1ParamStoresByNameData,
  PostConsoleV1ParamStoresByNameResponses,
  PostConsoleV1ParamStoresData,
  PostConsoleV1ParamStoresResponses,
  PostConsoleV1ReleasePipelinesByIdData,
  PostConsoleV1ReleasePipelinesByIdResponses,
  PostConsoleV1ReleasePipelinesData,
  PostConsoleV1ReleasePipelinesResponses,
  PostConsoleV1RolesData,
  PostConsoleV1RolesErrors,
  PostConsoleV1RolesResponses,
  PostConsoleV1SegmentsByIdConditionalData,
  PostConsoleV1SegmentsByIdConditionalErrors,
  PostConsoleV1SegmentsByIdConditionalResponses,
  PostConsoleV1SegmentsByIdIdListResetData,
  PostConsoleV1SegmentsByIdIdListResetResponses,
  PostConsoleV1SegmentsData,
  PostConsoleV1SegmentsErrors,
  PostConsoleV1SegmentsResponses,
  PostConsoleV1SettingsProjectData,
  PostConsoleV1SettingsProjectErrors,
  PostConsoleV1SettingsProjectResponses,
  PostConsoleV1SettingsReviewsData,
  PostConsoleV1SettingsReviewsErrors,
  PostConsoleV1SettingsReviewsResponses,
  PostConsoleV1SettingsRolesData,
  PostConsoleV1SettingsRolesErrors,
  PostConsoleV1SettingsRolesResponses,
  PostConsoleV1SettingsTeamsData,
  PostConsoleV1SettingsTeamsErrors,
  PostConsoleV1SettingsTeamsResponses,
  PostConsoleV1TagsData,
  PostConsoleV1TagsResponses,
  PostConsoleV1TargetAppData,
  PostConsoleV1TargetAppResponses,
  PostConsoleV1UnitIdTypesData,
  PostConsoleV1UnitIdTypesErrors,
  PostConsoleV1UnitIdTypesResponses,
  PostConsoleV1UsersByEmailData,
  PostConsoleV1UsersByEmailErrors,
  PostConsoleV1UsersByEmailResponses,
  PostConsoleV1UsersInviteData,
  PostConsoleV1UsersInviteErrors,
  PostConsoleV1UsersInviteResponses,
  PostConsoleV1UsersTeamsData,
  PostConsoleV1UsersTeamsErrors,
  PostConsoleV1UsersTeamsResponses,
  PutConsoleV1AutotunesByIdMakeDecisionData,
  PutConsoleV1AutotunesByIdMakeDecisionErrors,
  PutConsoleV1AutotunesByIdMakeDecisionResponses,
  PutConsoleV1AutotunesByIdResetData,
  PutConsoleV1AutotunesByIdResetErrors,
  PutConsoleV1AutotunesByIdResetResponses,
  PutConsoleV1AutotunesByIdStartData,
  PutConsoleV1AutotunesByIdStartResponses,
  PutConsoleV1DynamicConfigsByIdDisableData,
  PutConsoleV1DynamicConfigsByIdDisableResponses,
  PutConsoleV1DynamicConfigsByIdEnableData,
  PutConsoleV1DynamicConfigsByIdEnableResponses,
  PutConsoleV1ExperimentsByIdAbandonData,
  PutConsoleV1ExperimentsByIdAbandonErrors,
  PutConsoleV1ExperimentsByIdAbandonResponses,
  PutConsoleV1ExperimentsByIdArchiveData,
  PutConsoleV1ExperimentsByIdArchiveErrors,
  PutConsoleV1ExperimentsByIdArchiveResponses,
  PutConsoleV1ExperimentsByIdMakeDecisionData,
  PutConsoleV1ExperimentsByIdMakeDecisionErrors,
  PutConsoleV1ExperimentsByIdMakeDecisionResponses,
  PutConsoleV1ExperimentsByIdResetData,
  PutConsoleV1ExperimentsByIdResetErrors,
  PutConsoleV1ExperimentsByIdResetResponses,
  PutConsoleV1ExperimentsByIdStartData,
  PutConsoleV1ExperimentsByIdStartErrors,
  PutConsoleV1ExperimentsByIdStartResponses,
  PutConsoleV1ExperimentsByIdUnarchiveData,
  PutConsoleV1ExperimentsByIdUnarchiveErrors,
  PutConsoleV1ExperimentsByIdUnarchiveResponses,
  PutConsoleV1GatesByIdArchiveData,
  PutConsoleV1GatesByIdArchiveResponses,
  PutConsoleV1GatesByIdDisableData,
  PutConsoleV1GatesByIdDisableResponses,
  PutConsoleV1GatesByIdEnableData,
  PutConsoleV1GatesByIdEnableResponses,
  PutConsoleV1GatesByIdLaunchData,
  PutConsoleV1GatesByIdLaunchResponses,
  PutConsoleV1GatesByIdUnarchiveData,
  PutConsoleV1GatesByIdUnarchiveResponses,
  PutConsoleV1MetricsByIdCancelArchiveData,
  PutConsoleV1MetricsByIdCancelArchiveErrors,
  PutConsoleV1MetricsByIdCancelArchiveResponses,
  PutConsoleV1MetricsByIdScheduleArchiveData,
  PutConsoleV1MetricsByIdScheduleArchiveErrors,
  PutConsoleV1MetricsByIdScheduleArchiveResponses,
  PutConsoleV1MetricsByIdUnarchiveData,
  PutConsoleV1MetricsByIdUnarchiveErrors,
  PutConsoleV1MetricsByIdUnarchiveResponses,
  PutConsoleV1ReleasePipelineTriggersByIdAbortData,
  PutConsoleV1ReleasePipelineTriggersByIdAbortResponses,
  PutConsoleV1ReleasePipelineTriggersByIdApproveData,
  PutConsoleV1ReleasePipelineTriggersByIdApproveResponses,
  PutConsoleV1ReleasePipelineTriggersByIdPauseData,
  PutConsoleV1ReleasePipelineTriggersByIdPauseResponses,
  PutConsoleV1ReleasePipelineTriggersByIdRolloutData,
  PutConsoleV1ReleasePipelineTriggersByIdRolloutResponses,
  PutConsoleV1ReleasePipelineTriggersByIdSkipData,
  PutConsoleV1ReleasePipelineTriggersByIdSkipResponses,
  PutConsoleV1ReleasePipelineTriggersByIdUnpauseData,
  PutConsoleV1ReleasePipelineTriggersByIdUnpauseResponses,
  PutConsoleV1SegmentsByIdArchiveData,
  PutConsoleV1SegmentsByIdArchiveErrors,
  PutConsoleV1SegmentsByIdArchiveResponses,
} from './types.gen'

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * List Topline Alerts
 */
export const getConsoleV1Alerts = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1AlertsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1AlertsResponses, GetConsoleV1AlertsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/alerts',
    ...options,
  })

/**
 * List Audit Logs
 */
export const getConsoleV1AuditLogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1AuditLogsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1AuditLogsResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/audit_logs',
    ...options,
  })

/**
 * List Autotune
 */
export const getConsoleV1Autotunes = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1AutotunesData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1AutotunesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/autotunes',
    ...options,
  })

/**
 * Create Autotune
 */
export const postConsoleV1Autotunes = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1AutotunesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1AutotunesResponses, PostConsoleV1AutotunesErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/autotunes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Autotune
 */
export const deleteConsoleV1AutotunesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1AutotunesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1AutotunesByIdResponses,
    DeleteConsoleV1AutotunesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/autotunes/{id}',
    ...options,
  })

/**
 * Read Autotune
 */
export const getConsoleV1AutotunesById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1AutotunesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1AutotunesByIdResponses,
    GetConsoleV1AutotunesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/autotunes/{id}',
    ...options,
  })

/**
 * Partially Update Autotune
 * Update selected properties of the experiment
 */
export const patchConsoleV1AutotunesById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1AutotunesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1AutotunesByIdResponses,
    PatchConsoleV1AutotunesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/autotunes/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Fully Update Autotune
 * Update all properties of the experiment
 */
export const postConsoleV1AutotunesById = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1AutotunesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1AutotunesByIdResponses,
    PostConsoleV1AutotunesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/autotunes/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Finish Experiment Early
 */
export const putConsoleV1AutotunesByIdMakeDecision = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1AutotunesByIdMakeDecisionData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1AutotunesByIdMakeDecisionResponses,
    PutConsoleV1AutotunesByIdMakeDecisionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/autotunes/{id}/make_decision',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Reset Experiment
 */
export const putConsoleV1AutotunesByIdReset = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1AutotunesByIdResetData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1AutotunesByIdResetResponses,
    PutConsoleV1AutotunesByIdResetErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/autotunes/{id}/reset',
    ...options,
  })

/**
 * Start Autotune Experiment
 */
export const putConsoleV1AutotunesByIdStart = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1AutotunesByIdStartData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1AutotunesByIdStartResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/autotunes/{id}/start',
    ...options,
  })

/**
 * Change Validation
 */
export const postConsoleV1ChangeValidation = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ChangeValidationData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1ChangeValidationResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/change_validation',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Update change validation message
 */
export const patchConsoleV1ChangeValidationMessage = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1ChangeValidationMessageData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1ChangeValidationMessageResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/change_validation/message',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get Company Info
 */
export const getConsoleV1Company = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1CompanyData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1CompanyResponses, GetConsoleV1CompanyErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/company',
    ...options,
  })

/**
 * List Dynamic Configs
 */
export const getConsoleV1DynamicConfigs = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1DynamicConfigsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1DynamicConfigsResponses,
    GetConsoleV1DynamicConfigsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs',
    ...options,
  })

/**
 * Create Dynamic Config
 */
export const postConsoleV1DynamicConfigs = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1DynamicConfigsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1DynamicConfigsResponses,
    PostConsoleV1DynamicConfigsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Dynamic Config
 */
export const deleteConsoleV1DynamicConfigsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1DynamicConfigsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1DynamicConfigsByIdResponses,
    DeleteConsoleV1DynamicConfigsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}',
    ...options,
  })

/**
 * Get Dynamic Config
 */
export const getConsoleV1DynamicConfigsById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1DynamicConfigsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1DynamicConfigsByIdResponses,
    GetConsoleV1DynamicConfigsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}',
    ...options,
  })

/**
 * Partially Update Dynamic Config
 */
export const patchConsoleV1DynamicConfigsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1DynamicConfigsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1DynamicConfigsByIdResponses,
    PatchConsoleV1DynamicConfigsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Fully Update Dynamic Config
 */
export const postConsoleV1DynamicConfigsById = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1DynamicConfigsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1DynamicConfigsByIdResponses,
    PostConsoleV1DynamicConfigsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Disable Dynamic Config
 */
export const putConsoleV1DynamicConfigsByIdDisable = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1DynamicConfigsByIdDisableData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1DynamicConfigsByIdDisableResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}/disable',
    ...options,
  })

/**
 * Enable Dynamic Config
 */
export const putConsoleV1DynamicConfigsByIdEnable = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1DynamicConfigsByIdEnableData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1DynamicConfigsByIdEnableResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}/enable',
    ...options,
  })

/**
 * Delete Dynamic Config Rule
 */
export const deleteConsoleV1DynamicConfigsByIdRuleByRuleId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1DynamicConfigsByIdRuleByRuleIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}/rule/{ruleId}',
    ...options,
  })

/**
 * Get Specific Dynamic Config Rule
 */
export const getConsoleV1DynamicConfigsByIdRuleByRuleId = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1DynamicConfigsByIdRuleByRuleIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1DynamicConfigsByIdRuleByRuleIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}/rule/{ruleId}',
    ...options,
  })

/**
 * Update Dynamic Config Rule By Id
 */
export const patchConsoleV1DynamicConfigsByIdRuleByRuleId = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1DynamicConfigsByIdRuleByRuleIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1DynamicConfigsByIdRuleByRuleIdResponses, unknown, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}/rule/{ruleId}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    },
  )

/**
 * Get Dynamic Config Rules
 */
export const getConsoleV1DynamicConfigsByIdRules = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1DynamicConfigsByIdRulesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1DynamicConfigsByIdRulesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}/rules',
    ...options,
  })

/**
 * List Dynamic Config Versions
 */
export const getConsoleV1DynamicConfigsByIdVersions = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1DynamicConfigsByIdVersionsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1DynamicConfigsByIdVersionsResponses,
    GetConsoleV1DynamicConfigsByIdVersionsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/dynamic_configs/{id}/versions',
    ...options,
  })

/**
 * Get Environments
 */
export const getConsoleV1Environments = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1EnvironmentsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1EnvironmentsResponses,
    GetConsoleV1EnvironmentsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/environments',
    ...options,
  })

/**
 * Update Environments
 */
export const postConsoleV1Environments = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1EnvironmentsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1EnvironmentsResponses,
    PostConsoleV1EnvironmentsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/environments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Events
 */
export const getConsoleV1Events = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1EventsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1EventsResponses, GetConsoleV1EventsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/events',
    ...options,
  })

/**
 * Get specific events
 */
export const getConsoleV1EventsByEventName = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1EventsByEventNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1EventsByEventNameResponses,
    GetConsoleV1EventsByEventNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/events/{eventName}',
    ...options,
  })

/**
 * Get metrics using event name
 */
export const getConsoleV1EventsByEventNameMetrics = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1EventsByEventNameMetricsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1EventsByEventNameMetricsResponses,
    GetConsoleV1EventsByEventNameMetricsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/events/{eventName}/metrics',
    ...options,
  })

/**
 * List Experiments
 */
export const getConsoleV1Experiments = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1ExperimentsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1ExperimentsResponses, GetConsoleV1ExperimentsErrors, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments',
      ...options,
    },
  )

/**
 * Create Experiment
 */
export const postConsoleV1Experiments = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsResponses,
    PostConsoleV1ExperimentsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Deleted Experiment
 */
export const deleteConsoleV1ExperimentsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1ExperimentsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1ExperimentsByIdResponses,
    DeleteConsoleV1ExperimentsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}',
    ...options,
  })

/**
 * Get Experiment
 */
export const getConsoleV1ExperimentsById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ExperimentsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1ExperimentsByIdResponses,
    GetConsoleV1ExperimentsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}',
    ...options,
  })

/**
 * Partially Update Experiment
 */
export const patchConsoleV1ExperimentsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1ExperimentsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1ExperimentsByIdResponses,
    PatchConsoleV1ExperimentsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Fully Update Experiment
 */
export const postConsoleV1ExperimentsById = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsByIdResponses,
    PostConsoleV1ExperimentsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Abandon Experiment
 */
export const putConsoleV1ExperimentsByIdAbandon = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ExperimentsByIdAbandonData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1ExperimentsByIdAbandonResponses,
    PutConsoleV1ExperimentsByIdAbandonErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/abandon',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Archive Experiment
 */
export const putConsoleV1ExperimentsByIdArchive = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ExperimentsByIdArchiveData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1ExperimentsByIdArchiveResponses,
    PutConsoleV1ExperimentsByIdArchiveErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/archive',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Retrieve cumulative exposures
 */
export const getConsoleV1ExperimentsByIdCumulativeExposures = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ExperimentsByIdCumulativeExposuresData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1ExperimentsByIdCumulativeExposuresResponses, unknown, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/cumulative_exposures',
      ...options,
    },
  )

/**
 * Disable Experiment Groups
 */
export const postConsoleV1ExperimentsByIdDisableGroups = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsByIdDisableGroupsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsByIdDisableGroupsResponses,
    PostConsoleV1ExperimentsByIdDisableGroupsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/disable_groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Enable Experiment Groups
 */
export const postConsoleV1ExperimentsByIdEnableGroups = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsByIdEnableGroupsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsByIdEnableGroupsResponses,
    PostConsoleV1ExperimentsByIdEnableGroupsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/enable_groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Load Pulse (Warehouse Native)
 */
export const postConsoleV1ExperimentsByIdLoadPulse = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsByIdLoadPulseData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsByIdLoadPulseResponses,
    PostConsoleV1ExperimentsByIdLoadPulseErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/load_pulse',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Finish Experiment Early
 */
export const putConsoleV1ExperimentsByIdMakeDecision = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ExperimentsByIdMakeDecisionData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1ExperimentsByIdMakeDecisionResponses,
    PutConsoleV1ExperimentsByIdMakeDecisionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/make_decision',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Experiment Overrides
 */
export const deleteConsoleV1ExperimentsByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1ExperimentsByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1ExperimentsByIdOverridesResponses,
    DeleteConsoleV1ExperimentsByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/overrides',
    ...options,
  })

/**
 * Get Experiment Overrides
 */
export const getConsoleV1ExperimentsByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ExperimentsByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1ExperimentsByIdOverridesResponses,
    GetConsoleV1ExperimentsByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/overrides',
    ...options,
  })

/**
 * Partially Update Experiment Overrides
 */
export const patchConsoleV1ExperimentsByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1ExperimentsByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1ExperimentsByIdOverridesResponses,
    PatchConsoleV1ExperimentsByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/overrides',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Update Experiment Overrides
 */
export const postConsoleV1ExperimentsByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsByIdOverridesResponses,
    PostConsoleV1ExperimentsByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/overrides',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Pulse Load History (Warehouse Native)
 */
export const getConsoleV1ExperimentsByIdPulseLoadHistory = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ExperimentsByIdPulseLoadHistoryData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1ExperimentsByIdPulseLoadHistoryResponses,
    GetConsoleV1ExperimentsByIdPulseLoadHistoryErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/pulse_load_history',
    ...options,
  })

/**
 * Retrieve Pulse Results (Beta)
 */
export const getConsoleV1ExperimentsByIdPulseResults = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ExperimentsByIdPulseResultsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1ExperimentsByIdPulseResultsResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/pulse_results',
    ...options,
  })

/**
 * Reset Experiment
 */
export const putConsoleV1ExperimentsByIdReset = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ExperimentsByIdResetData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1ExperimentsByIdResetResponses,
    PutConsoleV1ExperimentsByIdResetErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/reset',
    ...options,
  })

/**
 * Start Experiment
 */
export const putConsoleV1ExperimentsByIdStart = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ExperimentsByIdStartData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1ExperimentsByIdStartResponses,
    PutConsoleV1ExperimentsByIdStartErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/start',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Unarchive Experiment
 */
export const putConsoleV1ExperimentsByIdUnarchive = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ExperimentsByIdUnarchiveData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1ExperimentsByIdUnarchiveResponses,
    PutConsoleV1ExperimentsByIdUnarchiveErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/{id}/unarchive',
    ...options,
  })

/**
 * Delete Assignment Source
 */
export const deleteConsoleV1ExperimentsAssignmentSourceByName = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1ExperimentsAssignmentSourceByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1ExperimentsAssignmentSourceByNameResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/assignment_source/{name}',
    ...options,
  })

/**
 * Patch Assignment Source
 */
export const patchConsoleV1ExperimentsAssignmentSourceByName = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1ExperimentsAssignmentSourceByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1ExperimentsAssignmentSourceByNameResponses,
    PatchConsoleV1ExperimentsAssignmentSourceByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/assignment_source/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Post Assignment Source
 */
export const postConsoleV1ExperimentsAssignmentSourceByName = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsAssignmentSourceByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsAssignmentSourceByNameResponses,
    PostConsoleV1ExperimentsAssignmentSourceByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/assignment_source/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Assignment Sources
 */
export const getConsoleV1ExperimentsAssignmentSources = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1ExperimentsAssignmentSourcesData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1ExperimentsAssignmentSourcesResponses,
    GetConsoleV1ExperimentsAssignmentSourcesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/assignment_sources',
    ...options,
  })

/**
 * Create Assignment Source
 */
export const postConsoleV1ExperimentsAssignmentSources = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsAssignmentSourcesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsAssignmentSourcesResponses,
    PostConsoleV1ExperimentsAssignmentSourcesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/assignment_sources',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Entity Property Sources
 */
export const getConsoleV1ExperimentsEntityProperties = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1ExperimentsEntityPropertiesData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1ExperimentsEntityPropertiesResponses,
    GetConsoleV1ExperimentsEntityPropertiesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/entity_properties',
    ...options,
  })

/**
 * Create Entity Property Source
 */
export const postConsoleV1ExperimentsEntityProperties = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsEntityPropertiesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsEntityPropertiesResponses,
    PostConsoleV1ExperimentsEntityPropertiesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/entity_properties',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Entity Property Source
 */
export const deleteConsoleV1ExperimentsEntityPropertyByName = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1ExperimentsEntityPropertyByNameResponses,
    DeleteConsoleV1ExperimentsEntityPropertyByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/entity_property/{name}',
    ...options,
  })

/**
 * Get Entity Property Source
 */
export const getConsoleV1ExperimentsEntityPropertyByName = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1ExperimentsEntityPropertyByNameResponses,
    GetConsoleV1ExperimentsEntityPropertyByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/entity_property/{name}',
    ...options,
  })

/**
 * Patch Entity Property Source
 */
export const patchConsoleV1ExperimentsEntityPropertyByName = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1ExperimentsEntityPropertyByNameResponses,
    PatchConsoleV1ExperimentsEntityPropertyByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/entity_property/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Post Entity Property Source
 */
export const postConsoleV1ExperimentsEntityPropertyByName = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsEntityPropertyByNameResponses,
    PostConsoleV1ExperimentsEntityPropertyByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/entity_property/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List qualifying event
 */
export const getConsoleV1ExperimentsQualifyingEvents = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1ExperimentsQualifyingEventsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1ExperimentsQualifyingEventsResponses,
    GetConsoleV1ExperimentsQualifyingEventsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/qualifying_events',
    ...options,
  })

/**
 * Create Qualifying Event
 */
export const postConsoleV1ExperimentsQualifyingEvents = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsQualifyingEventsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsQualifyingEventsResponses,
    PostConsoleV1ExperimentsQualifyingEventsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/qualifying_events',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Qualifying Event
 */
export const deleteConsoleV1ExperimentsQualifyingEventsByName = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1ExperimentsQualifyingEventsByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1ExperimentsQualifyingEventsByNameResponses,
    DeleteConsoleV1ExperimentsQualifyingEventsByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/qualifying_events/{name}',
    ...options,
  })

/**
 * Read Qualifying Event
 */
export const getConsoleV1ExperimentsQualifyingEventsByName = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ExperimentsQualifyingEventsByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1ExperimentsQualifyingEventsByNameResponses,
    GetConsoleV1ExperimentsQualifyingEventsByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/qualifying_events/{name}',
    ...options,
  })

/**
 * Update Qualifying Event
 */
export const postConsoleV1ExperimentsQualifyingEventsByName = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ExperimentsQualifyingEventsByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1ExperimentsQualifyingEventsByNameResponses,
    PostConsoleV1ExperimentsQualifyingEventsByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/experiments/qualifying_events/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Read Exposure Event Count
 * Get the count of exposure events recently received by Statsig.
 */
export const getConsoleV1ExposureCount = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1ExposureCountData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1ExposureCountResponses,
    GetConsoleV1ExposureCountErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/exposure_count',
    ...options,
  })

/**
 * List Gates
 */
export const getConsoleV1Gates = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1GatesData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1GatesResponses, GetConsoleV1GatesErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates',
    ...options,
  })

/**
 * Create Gate
 */
export const postConsoleV1Gates = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1GatesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1GatesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Gates
 */
export const deleteConsoleV1GatesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1GatesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<DeleteConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}',
    ...options,
  })

/**
 * Read Gate
 */
export const getConsoleV1GatesById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1GatesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}',
    ...options,
  })

/**
 * Partially Update Gates
 */
export const patchConsoleV1GatesById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1GatesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Fully Update Gates
 */
export const postConsoleV1GatesById = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1GatesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Archive Gate
 */
export const putConsoleV1GatesByIdArchive = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1GatesByIdArchiveData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdArchiveResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/archive',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Disable Gate
 */
export const putConsoleV1GatesByIdDisable = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1GatesByIdDisableData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdDisableResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/disable',
    ...options,
  })

/**
 * Enable Gate
 */
export const putConsoleV1GatesByIdEnable = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1GatesByIdEnableData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdEnableResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/enable',
    ...options,
  })

/**
 * Launch Gate
 */
export const putConsoleV1GatesByIdLaunch = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1GatesByIdLaunchData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdLaunchResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/launch',
    ...options,
  })

/**
 * Load Pulse Gate
 */
export const postConsoleV1GatesByIdLoadPulse = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1GatesByIdLoadPulseData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdLoadPulseResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/load_pulse',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Gate Overrides
 */
export const deleteConsoleV1GatesByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1GatesByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<DeleteConsoleV1GatesByIdOverridesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/overrides',
    ...options,
  })

/**
 * Get Gate Override
 */
export const getConsoleV1GatesByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1GatesByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1GatesByIdOverridesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/overrides',
    ...options,
  })

/**
 * Add Gate Overrides
 */
export const patchConsoleV1GatesByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1GatesByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1GatesByIdOverridesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/overrides',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Update Gate Overrides
 */
export const postConsoleV1GatesByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1GatesByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdOverridesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/overrides',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Add Gate Rule
 */
export const postConsoleV1GatesByIdRule = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1GatesByIdRuleData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdRuleResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/rule',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Read Gate Rules
 */
export const getConsoleV1GatesByIdRules = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1GatesByIdRulesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1GatesByIdRulesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/rules',
    ...options,
  })

/**
 * Update list of current Gate Rules settings
 * Update list of current Gate Rules settings. It does NOT replace, create or delete if you add more rules and remove rules in the rules object. Please get the current rules through GET and use that as the base object.
 */
export const patchConsoleV1GatesByIdRules = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1GatesByIdRulesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1GatesByIdRulesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/rules',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Add Multiple Gate Rule
 */
export const postConsoleV1GatesByIdRules = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1GatesByIdRulesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdRulesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/rules',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Gate Rule
 */
export const deleteConsoleV1GatesByIdRulesByRuleId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1GatesByIdRulesByRuleIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<DeleteConsoleV1GatesByIdRulesByRuleIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/rules/{ruleID}',
    ...options,
  })

/**
 * Update Gate Rules
 * Update all given rules. It does NOT create or delete if you add more rules and remove rules in the rules object.
 */
export const patchConsoleV1GatesByIdRulesByRuleId = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1GatesByIdRulesByRuleIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1GatesByIdRulesByRuleIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/rules/{ruleID}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Pulse Load History (Warehouse Native)
 */
export const getConsoleV1GatesByIdRulesByRuleIdPulseLoadHistory = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1GatesByIdRulesByRuleIdPulseLoadHistoryData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1GatesByIdRulesByRuleIdPulseLoadHistoryResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/rules/{ruleID}/pulse_load_history',
    ...options,
  })

/**
 * Retrieve Pulse Results (Beta)
 */
export const getConsoleV1GatesByIdRulesByRuleIdPulseResults = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1GatesByIdRulesByRuleIdPulseResultsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1GatesByIdRulesByRuleIdPulseResultsResponses, unknown, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/rules/{ruleID}/pulse_results',
      ...options,
    },
  )

/**
 * Unarchive Gate
 */
export const putConsoleV1GatesByIdUnarchive = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1GatesByIdUnarchiveData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdUnarchiveResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/unarchive',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Gate Versions
 */
export const getConsoleV1GatesByIdVersions = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1GatesByIdVersionsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1GatesByIdVersionsResponses,
    GetConsoleV1GatesByIdVersionsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/gates/{id}/versions',
    ...options,
  })

/**
 * List Holdouts
 */
export const getConsoleV1Holdouts = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1HoldoutsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1HoldoutsResponses, GetConsoleV1HoldoutsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts',
    ...options,
  })

/**
 * Create holdout
 */
export const postConsoleV1Holdouts = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1HoldoutsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1HoldoutsResponses, PostConsoleV1HoldoutsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete holdout by id
 */
export const deleteConsoleV1HoldoutsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1HoldoutsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1HoldoutsByIdResponses,
    DeleteConsoleV1HoldoutsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts/{id}',
    ...options,
  })

/**
 * Get holdout by id
 */
export const getConsoleV1HoldoutsById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1HoldoutsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1HoldoutsByIdResponses,
    GetConsoleV1HoldoutsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts/{id}',
    ...options,
  })

/**
 * Patch holdout by id. You can pass in only the data you want to update.
 */
export const patchConsoleV1HoldoutsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1HoldoutsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1HoldoutsByIdResponses,
    PatchConsoleV1HoldoutsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Update holdout by id
 */
export const postConsoleV1HoldoutsById = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1HoldoutsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1HoldoutsByIdResponses,
    PostConsoleV1HoldoutsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Remove Holdout Overrides
 * Remove selected ids from an id list
 */
export const deleteConsoleV1HoldoutsByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1HoldoutsByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1HoldoutsByIdOverridesResponses,
    DeleteConsoleV1HoldoutsByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts/{id}/overrides',
    ...options,
  })

/**
 * Read Holdout Overrides
 */
export const getConsoleV1HoldoutsByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1HoldoutsByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1HoldoutsByIdOverridesResponses,
    GetConsoleV1HoldoutsByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts/{id}/overrides',
    ...options,
  })

/**
 * Add Holdout Overrides
 */
export const patchConsoleV1HoldoutsByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1HoldoutsByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1HoldoutsByIdOverridesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts/{id}/overrides',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Update Holdout Overrides
 */
export const postConsoleV1HoldoutsByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1HoldoutsByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1HoldoutsByIdOverridesResponses,
    PostConsoleV1HoldoutsByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts/{id}/overrides',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Retrieve Pulse Results
 */
export const getConsoleV1HoldoutsByIdPulseResults = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1HoldoutsByIdPulseResultsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1HoldoutsByIdPulseResultsResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/holdouts/{id}/pulse_results',
    ...options,
  })

/**
 * Delete Ingestion Source
 */
export const deleteConsoleV1Ingestion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1IngestionData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<DeleteConsoleV1IngestionResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion',
    ...options,
  })

/**
 * Read Ingestion
 */
export const getConsoleV1Ingestion = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1IngestionData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1IngestionResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion',
    ...options,
  })

/**
 * Update Ingestion Source
 */
export const patchConsoleV1Ingestion = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1IngestionData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1IngestionResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Create Ingestion Source
 */
export const postConsoleV1Ingestion = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1IngestionData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1IngestionResponses, PostConsoleV1IngestionErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Backfill Ingestion
 */
export const postConsoleV1IngestionBackfill = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1IngestionBackfillData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1IngestionBackfillResponses,
    PostConsoleV1IngestionBackfillErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion/backfill',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Create Ingestion Databricks
 */
export const postConsoleV1IngestionConnectionDatabricks = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1IngestionConnectionDatabricksData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1IngestionConnectionDatabricksResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion/connection/databricks',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get Ingestion Event Count
 */
export const getConsoleV1IngestionEventsCount = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1IngestionEventsCountData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1IngestionEventsCountResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion/events/count',
    ...options,
  })

/**
 * Get Ingestion Event Delta Ledger
 */
export const getConsoleV1IngestionEventsDelta = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1IngestionEventsDeltaData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1IngestionEventsDeltaResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion/events/delta',
    ...options,
  })

/**
 * List Ingestion Runs
 */
export const getConsoleV1IngestionRuns = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1IngestionRunsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1IngestionRunsResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion/runs',
    ...options,
  })

/**
 * Read Ingestion Run
 */
export const getConsoleV1IngestionRunsById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1IngestionRunsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1IngestionRunsByIdResponses,
    GetConsoleV1IngestionRunsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion/runs/{id}',
    ...options,
  })

/**
 * Read Ingestion Schedule
 */
export const getConsoleV1IngestionSchedule = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1IngestionScheduleData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1IngestionScheduleResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion/schedule',
    ...options,
  })

/**
 * Update Ingestion Schedule
 */
export const postConsoleV1IngestionSchedule = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1IngestionScheduleData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1IngestionScheduleResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion/schedule',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Ingestions Status
 */
export const getConsoleV1IngestionStatus = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1IngestionStatusData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1IngestionStatusResponses,
    GetConsoleV1IngestionStatusErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/ingestion/status',
    ...options,
  })

/**
 * List Keys
 */
export const getConsoleV1Keys = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1KeysData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1KeysResponses, GetConsoleV1KeysErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/keys',
    ...options,
  })

/**
 * Create Key
 */
export const postConsoleV1Keys = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1KeysData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1KeysResponses, PostConsoleV1KeysErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/keys',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Key
 */
export const deleteConsoleV1KeysById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1KeysByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1KeysByIdResponses,
    DeleteConsoleV1KeysByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/keys/{id}',
    ...options,
  })

/**
 * Read Key
 */
export const getConsoleV1KeysById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1KeysByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1KeysByIdResponses, GetConsoleV1KeysByIdErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/keys/{id}',
    ...options,
  })

/**
 * Update Key
 */
export const patchConsoleV1KeysById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1KeysByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1KeysByIdResponses, PatchConsoleV1KeysByIdErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/keys/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Deactivate Key
 */
export const patchConsoleV1KeysByIdDeactivate = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1KeysByIdDeactivateData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1KeysByIdDeactivateResponses,
    PatchConsoleV1KeysByIdDeactivateErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/keys/{id}/deactivate',
    ...options,
  })

/**
 * Rotate Key
 */
export const patchConsoleV1KeysByIdRotate = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1KeysByIdRotateData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1KeysByIdRotateResponses,
    PatchConsoleV1KeysByIdRotateErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/keys/{id}/rotate',
    ...options,
  })

/**
 * Get Layers
 */
export const getConsoleV1Layers = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1LayersData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1LayersResponses, GetConsoleV1LayersErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers',
    ...options,
  })

/**
 * Create a Layer
 */
export const postConsoleV1Layers = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1LayersData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1LayersResponses, PostConsoleV1LayersErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete a layer
 */
export const deleteConsoleV1LayersById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1LayersByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1LayersByIdResponses,
    DeleteConsoleV1LayersByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers/{id}',
    ...options,
  })

/**
 * Get one layer
 */
export const getConsoleV1LayersById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1LayersByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1LayersByIdResponses, GetConsoleV1LayersByIdErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers/{id}',
    ...options,
  })

/**
 * Partially update a layer
 */
export const patchConsoleV1LayersById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1LayersByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1LayersByIdResponses,
    PatchConsoleV1LayersByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Update a layer
 */
export const postConsoleV1LayersById = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1LayersByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1LayersByIdResponses, PostConsoleV1LayersByIdErrors, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    },
  )

/**
 * Lineage: List Experiment related to Layer
 */
export const getConsoleV1LayersByIdExperiments = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1LayersByIdExperimentsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1LayersByIdExperimentsResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers/{id}/experiments',
    ...options,
  })

/**
 * Delete Layer Overrides
 */
export const deleteConsoleV1LayersByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1LayersByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1LayersByIdOverridesResponses,
    DeleteConsoleV1LayersByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers/{id}/overrides',
    ...options,
  })

/**
 * Get Layer Overrides
 */
export const getConsoleV1LayersByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1LayersByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1LayersByIdOverridesResponses,
    GetConsoleV1LayersByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers/{id}/overrides',
    ...options,
  })

/**
 * Add Layer Overrides
 */
export const patchConsoleV1LayersByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1LayersByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1LayersByIdOverridesResponses,
    PatchConsoleV1LayersByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers/{id}/overrides',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Update Layer Overrides
 */
export const postConsoleV1LayersByIdOverrides = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1LayersByIdOverridesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1LayersByIdOverridesResponses,
    PostConsoleV1LayersByIdOverridesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/layers/{id}/overrides',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Read Single Metric Value
 */
export const getConsoleV1Metrics = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1MetricsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1MetricsResponses, GetConsoleV1MetricsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics',
    ...options,
  })

/**
 * Create Metric
 */
export const postConsoleV1Metrics = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1MetricsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1MetricsResponses, PostConsoleV1MetricsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete a metric
 */
export const deleteConsoleV1MetricsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1MetricsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1MetricsByIdResponses,
    DeleteConsoleV1MetricsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/{id}',
    ...options,
  })

/**
 * Read Metric Definition
 */
export const getConsoleV1MetricsById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1MetricsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1MetricsByIdResponses, GetConsoleV1MetricsByIdErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/{id}',
    ...options,
  })

/**
 * Update a metric
 */
export const postConsoleV1MetricsById = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1MetricsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1MetricsByIdResponses,
    PostConsoleV1MetricsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Cancel archive a metric
 */
export const putConsoleV1MetricsByIdCancelArchive = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1MetricsByIdCancelArchiveData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1MetricsByIdCancelArchiveResponses,
    PutConsoleV1MetricsByIdCancelArchiveErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/{id}/cancel_archive',
    ...options,
  })

/**
 * Lineage: List experiments related to Metric
 */
export const getConsoleV1MetricsByIdExperiments = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1MetricsByIdExperimentsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1MetricsByIdExperimentsResponses,
    GetConsoleV1MetricsByIdExperimentsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/{id}/experiments',
    ...options,
  })

/**
 * Reload metric data
 */
export const postConsoleV1MetricsByIdReload = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1MetricsByIdReloadData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1MetricsByIdReloadResponses,
    PostConsoleV1MetricsByIdReloadErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/{id}/reload',
    ...options,
  })

/**
 * Schedule a metric archive
 */
export const putConsoleV1MetricsByIdScheduleArchive = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1MetricsByIdScheduleArchiveData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1MetricsByIdScheduleArchiveResponses,
    PutConsoleV1MetricsByIdScheduleArchiveErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/{id}/schedule_archive',
    ...options,
  })

/**
 * Unarchive a metric
 */
export const putConsoleV1MetricsByIdUnarchive = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1MetricsByIdUnarchiveData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1MetricsByIdUnarchiveResponses,
    PutConsoleV1MetricsByIdUnarchiveErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/{id}/unarchive',
    ...options,
  })

/**
 * List all Metrics
 */
export const getConsoleV1MetricsList = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1MetricsListData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1MetricsListResponses, GetConsoleV1MetricsListErrors, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/list',
      ...options,
    },
  )

/**
 * Create Metric Source
 */
export const postConsoleV1MetricsMetricSource = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1MetricsMetricSourceData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1MetricsMetricSourceResponses,
    PostConsoleV1MetricsMetricSourceErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/metric_source',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Metric Source
 */
export const deleteConsoleV1MetricsMetricSourceByName = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1MetricsMetricSourceByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1MetricsMetricSourceByNameResponses,
    DeleteConsoleV1MetricsMetricSourceByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/metric_source/{name}',
    ...options,
  })

/**
 * Read Metric Source
 */
export const getConsoleV1MetricsMetricSourceByName = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1MetricsMetricSourceByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1MetricsMetricSourceByNameResponses,
    GetConsoleV1MetricsMetricSourceByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/metric_source/{name}',
    ...options,
  })

/**
 * Update Metric Source
 */
export const postConsoleV1MetricsMetricSourceByName = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1MetricsMetricSourceByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1MetricsMetricSourceByNameResponses,
    PostConsoleV1MetricsMetricSourceByNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/metric_source/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Read Metric Source Metrics
 */
export const getConsoleV1MetricsMetricSourceByNameMetrics = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1MetricsMetricSourceByNameMetricsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1MetricsMetricSourceByNameMetricsResponses,
    GetConsoleV1MetricsMetricSourceByNameMetricsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/metric_source/{name}/metrics',
    ...options,
  })

/**
 * List metric source
 */
export const getConsoleV1MetricsMetricSourceList = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1MetricsMetricSourceListData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1MetricsMetricSourceListResponses,
    GetConsoleV1MetricsMetricSourceListErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/metric_source/list',
    ...options,
  })

/**
 * List All Metric Values
 * List all metric values
 */
export const getConsoleV1MetricsValues = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1MetricsValuesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1MetricsValuesResponses,
    GetConsoleV1MetricsValuesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/metrics/values',
    ...options,
  })

/**
 * List Param Stores
 */
export const getConsoleV1ParamStores = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1ParamStoresData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1ParamStoresResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/param_stores',
    ...options,
  })

/**
 * Create Param Store
 */
export const postConsoleV1ParamStores = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ParamStoresData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1ParamStoresResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/param_stores',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get Param Store
 */
export const getConsoleV1ParamStoresByName = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ParamStoresByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1ParamStoresByNameResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/param_stores/{name}',
    ...options,
  })

/**
 * Update Param Store
 */
export const postConsoleV1ParamStoresByName = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ParamStoresByNameData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1ParamStoresByNameResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/param_stores/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get Project Info
 */
export const getConsoleV1Project = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1ProjectData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1ProjectResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/project',
    ...options,
  })

/**
 * Get Report in CSV format
 */
export const getConsoleV1ProjectUsageBillingReport = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ProjectUsageBillingReportData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1ProjectUsageBillingReportResponses,
    GetConsoleV1ProjectUsageBillingReportErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/project/usage_billing/report',
    ...options,
  })

/**
 * List Pipeline Triggers
 */
export const getConsoleV1ReleasePipelineTriggers = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1ReleasePipelineTriggersData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1ReleasePipelineTriggersResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipeline_triggers',
    ...options,
  })

/**
 * Get Pipeline Trigger
 */
export const getConsoleV1ReleasePipelineTriggersById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ReleasePipelineTriggersByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1ReleasePipelineTriggersByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipeline_triggers/{id}',
    ...options,
  })

/**
 * Abort Pipeline Trigger
 */
export const putConsoleV1ReleasePipelineTriggersByIdAbort = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ReleasePipelineTriggersByIdAbortData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1ReleasePipelineTriggersByIdAbortResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipeline_triggers/{id}/abort',
    ...options,
  })

/**
 * Approve Pipeline Trigger Phase
 */
export const putConsoleV1ReleasePipelineTriggersByIdApprove = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ReleasePipelineTriggersByIdApproveData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1ReleasePipelineTriggersByIdApproveResponses, unknown, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}/approve',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    },
  )

/**
 * Pause Pipeline Trigger
 */
export const putConsoleV1ReleasePipelineTriggersByIdPause = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ReleasePipelineTriggersByIdPauseData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1ReleasePipelineTriggersByIdPauseResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipeline_triggers/{id}/pause',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Fully Roll Out Pipeline Trigger
 */
export const putConsoleV1ReleasePipelineTriggersByIdRollout = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ReleasePipelineTriggersByIdRolloutData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1ReleasePipelineTriggersByIdRolloutResponses, unknown, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}/rollout',
      ...options,
    },
  )

/**
 * Skip to Pipeline Trigger Phase
 */
export const putConsoleV1ReleasePipelineTriggersByIdSkip = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ReleasePipelineTriggersByIdSkipData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1ReleasePipelineTriggersByIdSkipResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipeline_triggers/{id}/skip',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Unpause Pipeline Trigger
 */
export const putConsoleV1ReleasePipelineTriggersByIdUnpause = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1ReleasePipelineTriggersByIdUnpauseData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<PutConsoleV1ReleasePipelineTriggersByIdUnpauseResponses, unknown, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}/unpause',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    },
  )

/**
 * List Pipelines
 */
export const getConsoleV1ReleasePipelines = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1ReleasePipelinesData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1ReleasePipelinesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipelines',
    ...options,
  })

/**
 * Create Pipeline
 */
export const postConsoleV1ReleasePipelines = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ReleasePipelinesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1ReleasePipelinesResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipelines',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Pipeline
 */
export const deleteConsoleV1ReleasePipelinesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1ReleasePipelinesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<DeleteConsoleV1ReleasePipelinesByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipelines/{id}',
    ...options,
  })

/**
 * Get Pipeline
 */
export const getConsoleV1ReleasePipelinesById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ReleasePipelinesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1ReleasePipelinesByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipelines/{id}',
    ...options,
  })

/**
 * Update Pipeline
 */
export const postConsoleV1ReleasePipelinesById = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1ReleasePipelinesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1ReleasePipelinesByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/release_pipelines/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get Reports
 */
export const getConsoleV1Reports = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1ReportsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1ReportsResponses, GetConsoleV1ReportsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/reports',
    ...options,
  })

/**
 * List Roles
 */
export const getConsoleV1Roles = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1RolesData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1RolesResponses, GetConsoleV1RolesErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/roles',
    ...options,
  })

/**
 * Create Role
 */
export const postConsoleV1Roles = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1RolesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1RolesResponses, PostConsoleV1RolesErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/roles',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Role
 */
export const deleteConsoleV1RolesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1RolesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1RolesByIdResponses,
    DeleteConsoleV1RolesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/roles/{id}',
    ...options,
  })

/**
 * Get Role
 */
export const getConsoleV1RolesById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1RolesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1RolesByIdResponses, GetConsoleV1RolesByIdErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/roles/{id}',
    ...options,
  })

/**
 * Update Role
 */
export const patchConsoleV1RolesById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1RolesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1RolesByIdResponses,
    PatchConsoleV1RolesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/roles/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Segments
 */
export const getConsoleV1Segments = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1SegmentsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1SegmentsResponses, GetConsoleV1SegmentsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments',
    ...options,
  })

/**
 * Create Segment
 */
export const postConsoleV1Segments = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1SegmentsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1SegmentsResponses, PostConsoleV1SegmentsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Segment
 */
export const deleteConsoleV1SegmentsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1SegmentsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1SegmentsByIdResponses,
    DeleteConsoleV1SegmentsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}',
    ...options,
  })

/**
 * Get Segment
 */
export const getConsoleV1SegmentsById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1SegmentsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1SegmentsByIdResponses,
    GetConsoleV1SegmentsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}',
    ...options,
  })

/**
 * Add IDs to User Store ID List
 * This endpoint has a limit of 1000 ids per request
 */
export const patchConsoleV1SegmentsByIdAddIds = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1SegmentsByIdAddIdsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1SegmentsByIdAddIdsResponses,
    PatchConsoleV1SegmentsByIdAddIdsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}/add_ids',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Archive Segment
 */
export const putConsoleV1SegmentsByIdArchive = <ThrowOnError extends boolean = false>(
  options: Options<PutConsoleV1SegmentsByIdArchiveData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).put<
    PutConsoleV1SegmentsByIdArchiveResponses,
    PutConsoleV1SegmentsByIdArchiveErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}/archive',
    ...options,
  })

/**
 * Update Segment Rules
 */
export const postConsoleV1SegmentsByIdConditional = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1SegmentsByIdConditionalData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1SegmentsByIdConditionalResponses,
    PostConsoleV1SegmentsByIdConditionalErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}/conditional',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Remove IDs from Segment
 * This endpoint is rate limited to 900 requests /15m or 12 requests /10s.
 */
export const deleteConsoleV1SegmentsByIdIdList = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1SegmentsByIdIdListData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1SegmentsByIdIdListResponses,
    DeleteConsoleV1SegmentsByIdIdListErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}/id_list',
    ...options,
  })

/**
 * Get IDs in a Segment
 * This endpoint is rate limited to 100
 */
export const getConsoleV1SegmentsByIdIdList = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1SegmentsByIdIdListData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1SegmentsByIdIdListResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}/id_list',
    ...options,
  })

/**
 * Add IDs to Segment
 * This endpoint is rate limited to 900 requests /15m or 12 requests /10s.
 */
export const patchConsoleV1SegmentsByIdIdList = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1SegmentsByIdIdListData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1SegmentsByIdIdListResponses,
    PatchConsoleV1SegmentsByIdIdListErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}/id_list',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Reset ID List Segment
 * Warning: Not atomic for big ID lists (> 1000)
 */
export const postConsoleV1SegmentsByIdIdListReset = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1SegmentsByIdIdListResetData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1SegmentsByIdIdListResetResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}/id_list/reset',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get ID List Metadata
 * This endpoint gets the metadata of the ID List.
 */
export const getConsoleV1SegmentsByIdIdlistMetadata = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1SegmentsByIdIdlistMetadataData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1SegmentsByIdIdlistMetadataResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}/idlist_metadata',
    ...options,
  })

/**
 * Remove IDs from User Store ID List
 * This endpoint has a limit of 1000 ids per request
 */
export const patchConsoleV1SegmentsByIdRemoveIds = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1SegmentsByIdRemoveIdsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1SegmentsByIdRemoveIdsResponses,
    PatchConsoleV1SegmentsByIdRemoveIdsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/segments/{id}/remove_ids',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get Project Settings
 */
export const getConsoleV1SettingsProject = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1SettingsProjectData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1SettingsProjectResponses,
    GetConsoleV1SettingsProjectErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/settings/project',
    ...options,
  })

/**
 * Update Project Settings
 */
export const postConsoleV1SettingsProject = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1SettingsProjectData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1SettingsProjectResponses,
    PostConsoleV1SettingsProjectErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/settings/project',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get Reviews Settings
 */
export const getConsoleV1SettingsReviews = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1SettingsReviewsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1SettingsReviewsResponses,
    GetConsoleV1SettingsReviewsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/settings/reviews',
    ...options,
  })

/**
 * Update Reviews Settings
 */
export const postConsoleV1SettingsReviews = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1SettingsReviewsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1SettingsReviewsResponses,
    PostConsoleV1SettingsReviewsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/settings/reviews',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get Roles Settings
 */
export const getConsoleV1SettingsRoles = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1SettingsRolesData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1SettingsRolesResponses,
    GetConsoleV1SettingsRolesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/settings/roles',
    ...options,
  })

/**
 * Update Roles Settings
 */
export const postConsoleV1SettingsRoles = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1SettingsRolesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1SettingsRolesResponses,
    PostConsoleV1SettingsRolesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/settings/roles',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Get Teams Settings
 */
export const getConsoleV1SettingsTeams = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1SettingsTeamsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    GetConsoleV1SettingsTeamsResponses,
    GetConsoleV1SettingsTeamsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/settings/teams',
    ...options,
  })

/**
 * Update Teams Settings
 */
export const postConsoleV1SettingsTeams = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1SettingsTeamsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1SettingsTeamsResponses,
    PostConsoleV1SettingsTeamsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/settings/teams',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Tags
 */
export const getConsoleV1Tags = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1TagsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1TagsResponses, GetConsoleV1TagsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/tags',
    ...options,
  })

/**
 * Create Tag
 */
export const postConsoleV1Tags = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1TagsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1TagsResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/tags',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Tag
 */
export const deleteConsoleV1TagsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1TagsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<DeleteConsoleV1TagsByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/tags/{id}',
    ...options,
  })

/**
 * Read Tag
 */
export const getConsoleV1TagsById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1TagsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<GetConsoleV1TagsByIdResponses, GetConsoleV1TagsByIdErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/tags/{id}',
    ...options,
  })

/**
 * Update Tag
 */
export const patchConsoleV1TagsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1TagsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<PatchConsoleV1TagsByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/tags/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Target Apps
 */
export const getConsoleV1TargetApp = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1TargetAppData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1TargetAppResponses, GetConsoleV1TargetAppErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/target_app',
    ...options,
  })

/**
 * Bulk Assign Target Apps
 */
export const patchConsoleV1TargetApp = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1TargetAppData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1TargetAppResponses,
    PatchConsoleV1TargetAppErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/target_app',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Create Target App
 */
export const postConsoleV1TargetApp = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1TargetAppData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1TargetAppResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/target_app',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Target App
 */
export const deleteConsoleV1TargetAppById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1TargetAppByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<DeleteConsoleV1TargetAppByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/target_app/{id}',
    ...options,
  })

/**
 * Read Target App
 */
export const getConsoleV1TargetAppById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1TargetAppByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1TargetAppByIdResponses,
    GetConsoleV1TargetAppByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/target_app/{id}',
    ...options,
  })

/**
 * Update Target App
 */
export const patchConsoleV1TargetAppById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1TargetAppByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1TargetAppByIdResponses,
    PatchConsoleV1TargetAppByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/target_app/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Unit ID Types
 */
export const getConsoleV1UnitIdTypes = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1UnitIdTypesData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1UnitIdTypesResponses, GetConsoleV1UnitIdTypesErrors, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/unit_id_types',
      ...options,
    },
  )

/**
 * Create Unit ID Type
 */
export const postConsoleV1UnitIdTypes = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1UnitIdTypesData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1UnitIdTypesResponses,
    PostConsoleV1UnitIdTypesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/unit_id_types',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Delete Unit ID Type
 */
export const deleteConsoleV1UnitIdTypesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1UnitIdTypesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<
    DeleteConsoleV1UnitIdTypesByIdResponses,
    DeleteConsoleV1UnitIdTypesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/unit_id_types/{id}',
    ...options,
  })

/**
 * Get Unit ID Type
 */
export const getConsoleV1UnitIdTypesById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1UnitIdTypesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1UnitIdTypesByIdResponses,
    GetConsoleV1UnitIdTypesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/unit_id_types/{id}',
    ...options,
  })

/**
 * Update Unit ID Type
 */
export const patchConsoleV1UnitIdTypesById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1UnitIdTypesByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1UnitIdTypesByIdResponses,
    PatchConsoleV1UnitIdTypesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/unit_id_types/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Users
 */
export const getConsoleV1Users = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1UsersData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1UsersResponses, GetConsoleV1UsersErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/users',
    ...options,
  })

/**
 * Get user by email
 */
export const getConsoleV1UsersByEmail = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1UsersByEmailData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1UsersByEmailResponses,
    GetConsoleV1UsersByEmailErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/users/{email}',
    ...options,
  })

/**
 * Update user
 */
export const postConsoleV1UsersByEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1UsersByEmailData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1UsersByEmailResponses,
    PostConsoleV1UsersByEmailErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/users/{email}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Invite user. To avoid spamming, invitation emails are not sent. Invitee will see invitation notification in-app after logging in.
 */
export const postConsoleV1UsersInvite = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1UsersInviteData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<
    PostConsoleV1UsersInviteResponses,
    PostConsoleV1UsersInviteErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/users/invite',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * List Teams
 */
export const getConsoleV1UsersTeams = <ThrowOnError extends boolean = false>(
  options?: Options<GetConsoleV1UsersTeamsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<GetConsoleV1UsersTeamsResponses, GetConsoleV1UsersTeamsErrors, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/users/teams',
    ...options,
  })

/**
 * Create Team
 */
export const postConsoleV1UsersTeams = <ThrowOnError extends boolean = false>(
  options: Options<PostConsoleV1UsersTeamsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).post<PostConsoleV1UsersTeamsResponses, PostConsoleV1UsersTeamsErrors, ThrowOnError>(
    {
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    },
  )

/**
 * Delete Team
 */
export const deleteConsoleV1UsersTeamsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConsoleV1UsersTeamsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).delete<DeleteConsoleV1UsersTeamsByIdResponses, unknown, ThrowOnError>({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/users/teams/{id}',
    ...options,
  })

/**
 * Get Team
 */
export const getConsoleV1UsersTeamsById = <ThrowOnError extends boolean = false>(
  options: Options<GetConsoleV1UsersTeamsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    GetConsoleV1UsersTeamsByIdResponses,
    GetConsoleV1UsersTeamsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/users/teams/{id}',
    ...options,
  })

/**
 * Update Team. Ops: Replace. Use GET for current data if you intent to Add.
 */
export const patchConsoleV1UsersTeamsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1UsersTeamsByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1UsersTeamsByIdResponses,
    PatchConsoleV1UsersTeamsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/users/teams/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })

/**
 * Update Warehouse Connection Parameters
 */
export const patchConsoleV1WhConnections = <ThrowOnError extends boolean = false>(
  options: Options<PatchConsoleV1WhConnectionsData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).patch<
    PatchConsoleV1WhConnectionsResponses,
    PatchConsoleV1WhConnectionsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'STATSIG-API-KEY',
        type: 'apiKey',
      },
    ],
    url: '/console/v1/wh_connections',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
