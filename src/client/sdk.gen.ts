// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client'
import type {
  GetConsoleV1AlertsData,
  GetConsoleV1AlertsResponses,
  GetConsoleV1AlertsErrors,
  GetConsoleV1AuditLogsData,
  GetConsoleV1AuditLogsResponses,
  GetConsoleV1AutotunesData,
  GetConsoleV1AutotunesResponses,
  PostConsoleV1AutotunesData,
  PostConsoleV1AutotunesResponses,
  PostConsoleV1AutotunesErrors,
  DeleteConsoleV1AutotunesByIdData,
  DeleteConsoleV1AutotunesByIdResponses,
  DeleteConsoleV1AutotunesByIdErrors,
  GetConsoleV1AutotunesByIdData,
  GetConsoleV1AutotunesByIdResponses,
  GetConsoleV1AutotunesByIdErrors,
  PatchConsoleV1AutotunesByIdData,
  PatchConsoleV1AutotunesByIdResponses,
  PatchConsoleV1AutotunesByIdErrors,
  PostConsoleV1AutotunesByIdData,
  PostConsoleV1AutotunesByIdResponses,
  PostConsoleV1AutotunesByIdErrors,
  PutConsoleV1AutotunesByIdMakeDecisionData,
  PutConsoleV1AutotunesByIdMakeDecisionResponses,
  PutConsoleV1AutotunesByIdMakeDecisionErrors,
  PutConsoleV1AutotunesByIdResetData,
  PutConsoleV1AutotunesByIdResetResponses,
  PutConsoleV1AutotunesByIdResetErrors,
  PutConsoleV1AutotunesByIdStartData,
  PutConsoleV1AutotunesByIdStartResponses,
  PostConsoleV1ChangeValidationData,
  PostConsoleV1ChangeValidationResponses,
  PatchConsoleV1ChangeValidationMessageData,
  PatchConsoleV1ChangeValidationMessageResponses,
  GetConsoleV1CompanyData,
  GetConsoleV1CompanyResponses,
  GetConsoleV1CompanyErrors,
  GetConsoleV1DynamicConfigsData,
  GetConsoleV1DynamicConfigsResponses,
  GetConsoleV1DynamicConfigsErrors,
  PostConsoleV1DynamicConfigsData,
  PostConsoleV1DynamicConfigsResponses,
  PostConsoleV1DynamicConfigsErrors,
  DeleteConsoleV1DynamicConfigsByIdData,
  DeleteConsoleV1DynamicConfigsByIdResponses,
  DeleteConsoleV1DynamicConfigsByIdErrors,
  GetConsoleV1DynamicConfigsByIdData,
  GetConsoleV1DynamicConfigsByIdResponses,
  GetConsoleV1DynamicConfigsByIdErrors,
  PatchConsoleV1DynamicConfigsByIdData,
  PatchConsoleV1DynamicConfigsByIdResponses,
  PatchConsoleV1DynamicConfigsByIdErrors,
  PostConsoleV1DynamicConfigsByIdData,
  PostConsoleV1DynamicConfigsByIdResponses,
  PostConsoleV1DynamicConfigsByIdErrors,
  PutConsoleV1DynamicConfigsByIdDisableData,
  PutConsoleV1DynamicConfigsByIdDisableResponses,
  PutConsoleV1DynamicConfigsByIdEnableData,
  PutConsoleV1DynamicConfigsByIdEnableResponses,
  DeleteConsoleV1DynamicConfigsByIdRuleByRuleIdData,
  DeleteConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
  GetConsoleV1DynamicConfigsByIdRuleByRuleIdData,
  GetConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
  PatchConsoleV1DynamicConfigsByIdRuleByRuleIdData,
  PatchConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
  GetConsoleV1DynamicConfigsByIdRulesData,
  GetConsoleV1DynamicConfigsByIdRulesResponses,
  GetConsoleV1DynamicConfigsByIdVersionsData,
  GetConsoleV1DynamicConfigsByIdVersionsResponses,
  GetConsoleV1DynamicConfigsByIdVersionsErrors,
  GetConsoleV1EnvironmentsData,
  GetConsoleV1EnvironmentsResponses,
  GetConsoleV1EnvironmentsErrors,
  PostConsoleV1EnvironmentsData,
  PostConsoleV1EnvironmentsResponses,
  PostConsoleV1EnvironmentsErrors,
  GetConsoleV1EventsData,
  GetConsoleV1EventsResponses,
  GetConsoleV1EventsErrors,
  GetConsoleV1EventsByEventNameData,
  GetConsoleV1EventsByEventNameResponses,
  GetConsoleV1EventsByEventNameErrors,
  GetConsoleV1EventsByEventNameMetricsData,
  GetConsoleV1EventsByEventNameMetricsResponses,
  GetConsoleV1EventsByEventNameMetricsErrors,
  GetConsoleV1ExperimentsData,
  GetConsoleV1ExperimentsResponses,
  GetConsoleV1ExperimentsErrors,
  PostConsoleV1ExperimentsData,
  PostConsoleV1ExperimentsResponses,
  PostConsoleV1ExperimentsErrors,
  DeleteConsoleV1ExperimentsByIdData,
  DeleteConsoleV1ExperimentsByIdResponses,
  DeleteConsoleV1ExperimentsByIdErrors,
  GetConsoleV1ExperimentsByIdData,
  GetConsoleV1ExperimentsByIdResponses,
  GetConsoleV1ExperimentsByIdErrors,
  PatchConsoleV1ExperimentsByIdData,
  PatchConsoleV1ExperimentsByIdResponses,
  PatchConsoleV1ExperimentsByIdErrors,
  PostConsoleV1ExperimentsByIdData,
  PostConsoleV1ExperimentsByIdResponses,
  PostConsoleV1ExperimentsByIdErrors,
  PutConsoleV1ExperimentsByIdAbandonData,
  PutConsoleV1ExperimentsByIdAbandonResponses,
  PutConsoleV1ExperimentsByIdAbandonErrors,
  PutConsoleV1ExperimentsByIdArchiveData,
  PutConsoleV1ExperimentsByIdArchiveResponses,
  PutConsoleV1ExperimentsByIdArchiveErrors,
  GetConsoleV1ExperimentsByIdCumulativeExposuresData,
  GetConsoleV1ExperimentsByIdCumulativeExposuresResponses,
  PostConsoleV1ExperimentsByIdDisableGroupsData,
  PostConsoleV1ExperimentsByIdDisableGroupsResponses,
  PostConsoleV1ExperimentsByIdDisableGroupsErrors,
  PostConsoleV1ExperimentsByIdEnableGroupsData,
  PostConsoleV1ExperimentsByIdEnableGroupsResponses,
  PostConsoleV1ExperimentsByIdEnableGroupsErrors,
  PostConsoleV1ExperimentsByIdLoadPulseData,
  PostConsoleV1ExperimentsByIdLoadPulseResponses,
  PostConsoleV1ExperimentsByIdLoadPulseErrors,
  PutConsoleV1ExperimentsByIdMakeDecisionData,
  PutConsoleV1ExperimentsByIdMakeDecisionResponses,
  PutConsoleV1ExperimentsByIdMakeDecisionErrors,
  DeleteConsoleV1ExperimentsByIdOverridesData,
  DeleteConsoleV1ExperimentsByIdOverridesResponses,
  DeleteConsoleV1ExperimentsByIdOverridesErrors,
  GetConsoleV1ExperimentsByIdOverridesData,
  GetConsoleV1ExperimentsByIdOverridesResponses,
  GetConsoleV1ExperimentsByIdOverridesErrors,
  PatchConsoleV1ExperimentsByIdOverridesData,
  PatchConsoleV1ExperimentsByIdOverridesResponses,
  PatchConsoleV1ExperimentsByIdOverridesErrors,
  PostConsoleV1ExperimentsByIdOverridesData,
  PostConsoleV1ExperimentsByIdOverridesResponses,
  PostConsoleV1ExperimentsByIdOverridesErrors,
  GetConsoleV1ExperimentsByIdPulseLoadHistoryData,
  GetConsoleV1ExperimentsByIdPulseLoadHistoryResponses,
  GetConsoleV1ExperimentsByIdPulseLoadHistoryErrors,
  GetConsoleV1ExperimentsByIdPulseResultsData,
  GetConsoleV1ExperimentsByIdPulseResultsResponses,
  PutConsoleV1ExperimentsByIdResetData,
  PutConsoleV1ExperimentsByIdResetResponses,
  PutConsoleV1ExperimentsByIdResetErrors,
  PutConsoleV1ExperimentsByIdStartData,
  PutConsoleV1ExperimentsByIdStartResponses,
  PutConsoleV1ExperimentsByIdStartErrors,
  PutConsoleV1ExperimentsByIdUnarchiveData,
  PutConsoleV1ExperimentsByIdUnarchiveResponses,
  PutConsoleV1ExperimentsByIdUnarchiveErrors,
  DeleteConsoleV1ExperimentsAssignmentSourceByNameData,
  DeleteConsoleV1ExperimentsAssignmentSourceByNameResponses,
  PatchConsoleV1ExperimentsAssignmentSourceByNameData,
  PatchConsoleV1ExperimentsAssignmentSourceByNameResponses,
  PatchConsoleV1ExperimentsAssignmentSourceByNameErrors,
  PostConsoleV1ExperimentsAssignmentSourceByNameData,
  PostConsoleV1ExperimentsAssignmentSourceByNameResponses,
  PostConsoleV1ExperimentsAssignmentSourceByNameErrors,
  GetConsoleV1ExperimentsAssignmentSourcesData,
  GetConsoleV1ExperimentsAssignmentSourcesResponses,
  GetConsoleV1ExperimentsAssignmentSourcesErrors,
  PostConsoleV1ExperimentsAssignmentSourcesData,
  PostConsoleV1ExperimentsAssignmentSourcesResponses,
  PostConsoleV1ExperimentsAssignmentSourcesErrors,
  GetConsoleV1ExperimentsEntityPropertiesData,
  GetConsoleV1ExperimentsEntityPropertiesResponses,
  GetConsoleV1ExperimentsEntityPropertiesErrors,
  PostConsoleV1ExperimentsEntityPropertiesData,
  PostConsoleV1ExperimentsEntityPropertiesResponses,
  PostConsoleV1ExperimentsEntityPropertiesErrors,
  DeleteConsoleV1ExperimentsEntityPropertyByNameData,
  DeleteConsoleV1ExperimentsEntityPropertyByNameResponses,
  DeleteConsoleV1ExperimentsEntityPropertyByNameErrors,
  GetConsoleV1ExperimentsEntityPropertyByNameData,
  GetConsoleV1ExperimentsEntityPropertyByNameResponses,
  GetConsoleV1ExperimentsEntityPropertyByNameErrors,
  PatchConsoleV1ExperimentsEntityPropertyByNameData,
  PatchConsoleV1ExperimentsEntityPropertyByNameResponses,
  PatchConsoleV1ExperimentsEntityPropertyByNameErrors,
  PostConsoleV1ExperimentsEntityPropertyByNameData,
  PostConsoleV1ExperimentsEntityPropertyByNameResponses,
  PostConsoleV1ExperimentsEntityPropertyByNameErrors,
  GetConsoleV1ExperimentsQualifyingEventsData,
  GetConsoleV1ExperimentsQualifyingEventsResponses,
  GetConsoleV1ExperimentsQualifyingEventsErrors,
  PostConsoleV1ExperimentsQualifyingEventsData,
  PostConsoleV1ExperimentsQualifyingEventsResponses,
  PostConsoleV1ExperimentsQualifyingEventsErrors,
  DeleteConsoleV1ExperimentsQualifyingEventsByNameData,
  DeleteConsoleV1ExperimentsQualifyingEventsByNameResponses,
  DeleteConsoleV1ExperimentsQualifyingEventsByNameErrors,
  GetConsoleV1ExperimentsQualifyingEventsByNameData,
  GetConsoleV1ExperimentsQualifyingEventsByNameResponses,
  GetConsoleV1ExperimentsQualifyingEventsByNameErrors,
  PostConsoleV1ExperimentsQualifyingEventsByNameData,
  PostConsoleV1ExperimentsQualifyingEventsByNameResponses,
  PostConsoleV1ExperimentsQualifyingEventsByNameErrors,
  GetConsoleV1ExposureCountData,
  GetConsoleV1ExposureCountResponses,
  GetConsoleV1ExposureCountErrors,
  GetConsoleV1GatesData,
  GetConsoleV1GatesResponses,
  GetConsoleV1GatesErrors,
  PostConsoleV1GatesData,
  PostConsoleV1GatesResponses,
  DeleteConsoleV1GatesByIdData,
  DeleteConsoleV1GatesByIdResponses,
  GetConsoleV1GatesByIdData,
  GetConsoleV1GatesByIdResponses,
  PatchConsoleV1GatesByIdData,
  PatchConsoleV1GatesByIdResponses,
  PostConsoleV1GatesByIdData,
  PostConsoleV1GatesByIdResponses,
  PutConsoleV1GatesByIdArchiveData,
  PutConsoleV1GatesByIdArchiveResponses,
  PutConsoleV1GatesByIdDisableData,
  PutConsoleV1GatesByIdDisableResponses,
  PutConsoleV1GatesByIdEnableData,
  PutConsoleV1GatesByIdEnableResponses,
  PutConsoleV1GatesByIdLaunchData,
  PutConsoleV1GatesByIdLaunchResponses,
  PostConsoleV1GatesByIdLoadPulseData,
  PostConsoleV1GatesByIdLoadPulseResponses,
  DeleteConsoleV1GatesByIdOverridesData,
  DeleteConsoleV1GatesByIdOverridesResponses,
  GetConsoleV1GatesByIdOverridesData,
  GetConsoleV1GatesByIdOverridesResponses,
  PatchConsoleV1GatesByIdOverridesData,
  PatchConsoleV1GatesByIdOverridesResponses,
  PostConsoleV1GatesByIdOverridesData,
  PostConsoleV1GatesByIdOverridesResponses,
  PostConsoleV1GatesByIdRuleData,
  PostConsoleV1GatesByIdRuleResponses,
  GetConsoleV1GatesByIdRulesData,
  GetConsoleV1GatesByIdRulesResponses,
  PatchConsoleV1GatesByIdRulesData,
  PatchConsoleV1GatesByIdRulesResponses,
  PostConsoleV1GatesByIdRulesData,
  PostConsoleV1GatesByIdRulesResponses,
  DeleteConsoleV1GatesByIdRulesByRuleIdData,
  DeleteConsoleV1GatesByIdRulesByRuleIdResponses,
  PatchConsoleV1GatesByIdRulesByRuleIdData,
  PatchConsoleV1GatesByIdRulesByRuleIdResponses,
  GetConsoleV1GatesByIdRulesByRuleIdPulseLoadHistoryData,
  GetConsoleV1GatesByIdRulesByRuleIdPulseLoadHistoryResponses,
  GetConsoleV1GatesByIdRulesByRuleIdPulseResultsData,
  GetConsoleV1GatesByIdRulesByRuleIdPulseResultsResponses,
  PutConsoleV1GatesByIdUnarchiveData,
  PutConsoleV1GatesByIdUnarchiveResponses,
  GetConsoleV1GatesByIdVersionsData,
  GetConsoleV1GatesByIdVersionsResponses,
  GetConsoleV1GatesByIdVersionsErrors,
  GetConsoleV1HoldoutsData,
  GetConsoleV1HoldoutsResponses,
  GetConsoleV1HoldoutsErrors,
  PostConsoleV1HoldoutsData,
  PostConsoleV1HoldoutsResponses,
  PostConsoleV1HoldoutsErrors,
  DeleteConsoleV1HoldoutsByIdData,
  DeleteConsoleV1HoldoutsByIdResponses,
  DeleteConsoleV1HoldoutsByIdErrors,
  GetConsoleV1HoldoutsByIdData,
  GetConsoleV1HoldoutsByIdResponses,
  GetConsoleV1HoldoutsByIdErrors,
  PatchConsoleV1HoldoutsByIdData,
  PatchConsoleV1HoldoutsByIdResponses,
  PatchConsoleV1HoldoutsByIdErrors,
  PostConsoleV1HoldoutsByIdData,
  PostConsoleV1HoldoutsByIdResponses,
  PostConsoleV1HoldoutsByIdErrors,
  DeleteConsoleV1HoldoutsByIdOverridesData,
  DeleteConsoleV1HoldoutsByIdOverridesResponses,
  DeleteConsoleV1HoldoutsByIdOverridesErrors,
  GetConsoleV1HoldoutsByIdOverridesData,
  GetConsoleV1HoldoutsByIdOverridesResponses,
  GetConsoleV1HoldoutsByIdOverridesErrors,
  PatchConsoleV1HoldoutsByIdOverridesData,
  PatchConsoleV1HoldoutsByIdOverridesResponses,
  PostConsoleV1HoldoutsByIdOverridesData,
  PostConsoleV1HoldoutsByIdOverridesResponses,
  PostConsoleV1HoldoutsByIdOverridesErrors,
  GetConsoleV1HoldoutsByIdPulseResultsData,
  GetConsoleV1HoldoutsByIdPulseResultsResponses,
  DeleteConsoleV1IngestionData,
  DeleteConsoleV1IngestionResponses,
  GetConsoleV1IngestionData,
  GetConsoleV1IngestionResponses,
  PatchConsoleV1IngestionData,
  PatchConsoleV1IngestionResponses,
  PostConsoleV1IngestionData,
  PostConsoleV1IngestionResponses,
  PostConsoleV1IngestionErrors,
  PostConsoleV1IngestionBackfillData,
  PostConsoleV1IngestionBackfillResponses,
  PostConsoleV1IngestionBackfillErrors,
  PostConsoleV1IngestionConnectionDatabricksData,
  PostConsoleV1IngestionConnectionDatabricksResponses,
  GetConsoleV1IngestionEventsCountData,
  GetConsoleV1IngestionEventsCountResponses,
  GetConsoleV1IngestionEventsDeltaData,
  GetConsoleV1IngestionEventsDeltaResponses,
  GetConsoleV1IngestionRunsData,
  GetConsoleV1IngestionRunsResponses,
  GetConsoleV1IngestionRunsByIdData,
  GetConsoleV1IngestionRunsByIdResponses,
  GetConsoleV1IngestionRunsByIdErrors,
  GetConsoleV1IngestionScheduleData,
  GetConsoleV1IngestionScheduleResponses,
  PostConsoleV1IngestionScheduleData,
  PostConsoleV1IngestionScheduleResponses,
  GetConsoleV1IngestionStatusData,
  GetConsoleV1IngestionStatusResponses,
  GetConsoleV1IngestionStatusErrors,
  GetConsoleV1KeysData,
  GetConsoleV1KeysResponses,
  GetConsoleV1KeysErrors,
  PostConsoleV1KeysData,
  PostConsoleV1KeysResponses,
  PostConsoleV1KeysErrors,
  DeleteConsoleV1KeysByIdData,
  DeleteConsoleV1KeysByIdResponses,
  DeleteConsoleV1KeysByIdErrors,
  GetConsoleV1KeysByIdData,
  GetConsoleV1KeysByIdResponses,
  GetConsoleV1KeysByIdErrors,
  PatchConsoleV1KeysByIdData,
  PatchConsoleV1KeysByIdResponses,
  PatchConsoleV1KeysByIdErrors,
  PatchConsoleV1KeysByIdDeactivateData,
  PatchConsoleV1KeysByIdDeactivateResponses,
  PatchConsoleV1KeysByIdDeactivateErrors,
  PatchConsoleV1KeysByIdRotateData,
  PatchConsoleV1KeysByIdRotateResponses,
  PatchConsoleV1KeysByIdRotateErrors,
  GetConsoleV1LayersData,
  GetConsoleV1LayersResponses,
  GetConsoleV1LayersErrors,
  PostConsoleV1LayersData,
  PostConsoleV1LayersResponses,
  PostConsoleV1LayersErrors,
  DeleteConsoleV1LayersByIdData,
  DeleteConsoleV1LayersByIdResponses,
  DeleteConsoleV1LayersByIdErrors,
  GetConsoleV1LayersByIdData,
  GetConsoleV1LayersByIdResponses,
  GetConsoleV1LayersByIdErrors,
  PatchConsoleV1LayersByIdData,
  PatchConsoleV1LayersByIdResponses,
  PatchConsoleV1LayersByIdErrors,
  PostConsoleV1LayersByIdData,
  PostConsoleV1LayersByIdResponses,
  PostConsoleV1LayersByIdErrors,
  GetConsoleV1LayersByIdExperimentsData,
  GetConsoleV1LayersByIdExperimentsResponses,
  DeleteConsoleV1LayersByIdOverridesData,
  DeleteConsoleV1LayersByIdOverridesResponses,
  DeleteConsoleV1LayersByIdOverridesErrors,
  GetConsoleV1LayersByIdOverridesData,
  GetConsoleV1LayersByIdOverridesResponses,
  GetConsoleV1LayersByIdOverridesErrors,
  PatchConsoleV1LayersByIdOverridesData,
  PatchConsoleV1LayersByIdOverridesResponses,
  PatchConsoleV1LayersByIdOverridesErrors,
  PostConsoleV1LayersByIdOverridesData,
  PostConsoleV1LayersByIdOverridesResponses,
  PostConsoleV1LayersByIdOverridesErrors,
  GetConsoleV1MetricsData,
  GetConsoleV1MetricsResponses,
  GetConsoleV1MetricsErrors,
  PostConsoleV1MetricsData,
  PostConsoleV1MetricsResponses,
  PostConsoleV1MetricsErrors,
  DeleteConsoleV1MetricsByIdData,
  DeleteConsoleV1MetricsByIdResponses,
  DeleteConsoleV1MetricsByIdErrors,
  GetConsoleV1MetricsByIdData,
  GetConsoleV1MetricsByIdResponses,
  GetConsoleV1MetricsByIdErrors,
  PostConsoleV1MetricsByIdData,
  PostConsoleV1MetricsByIdResponses,
  PostConsoleV1MetricsByIdErrors,
  PutConsoleV1MetricsByIdCancelArchiveData,
  PutConsoleV1MetricsByIdCancelArchiveResponses,
  PutConsoleV1MetricsByIdCancelArchiveErrors,
  GetConsoleV1MetricsByIdExperimentsData,
  GetConsoleV1MetricsByIdExperimentsResponses,
  GetConsoleV1MetricsByIdExperimentsErrors,
  PostConsoleV1MetricsByIdReloadData,
  PostConsoleV1MetricsByIdReloadResponses,
  PostConsoleV1MetricsByIdReloadErrors,
  PutConsoleV1MetricsByIdScheduleArchiveData,
  PutConsoleV1MetricsByIdScheduleArchiveResponses,
  PutConsoleV1MetricsByIdScheduleArchiveErrors,
  PutConsoleV1MetricsByIdUnarchiveData,
  PutConsoleV1MetricsByIdUnarchiveResponses,
  PutConsoleV1MetricsByIdUnarchiveErrors,
  GetConsoleV1MetricsListData,
  GetConsoleV1MetricsListResponses,
  GetConsoleV1MetricsListErrors,
  PostConsoleV1MetricsMetricSourceData,
  PostConsoleV1MetricsMetricSourceResponses,
  PostConsoleV1MetricsMetricSourceErrors,
  DeleteConsoleV1MetricsMetricSourceByNameData,
  DeleteConsoleV1MetricsMetricSourceByNameResponses,
  DeleteConsoleV1MetricsMetricSourceByNameErrors,
  GetConsoleV1MetricsMetricSourceByNameData,
  GetConsoleV1MetricsMetricSourceByNameResponses,
  GetConsoleV1MetricsMetricSourceByNameErrors,
  PostConsoleV1MetricsMetricSourceByNameData,
  PostConsoleV1MetricsMetricSourceByNameResponses,
  PostConsoleV1MetricsMetricSourceByNameErrors,
  GetConsoleV1MetricsMetricSourceByNameMetricsData,
  GetConsoleV1MetricsMetricSourceByNameMetricsResponses,
  GetConsoleV1MetricsMetricSourceByNameMetricsErrors,
  GetConsoleV1MetricsMetricSourceListData,
  GetConsoleV1MetricsMetricSourceListResponses,
  GetConsoleV1MetricsMetricSourceListErrors,
  GetConsoleV1MetricsValuesData,
  GetConsoleV1MetricsValuesResponses,
  GetConsoleV1MetricsValuesErrors,
  GetConsoleV1ParamStoresData,
  GetConsoleV1ParamStoresResponses,
  PostConsoleV1ParamStoresData,
  PostConsoleV1ParamStoresResponses,
  GetConsoleV1ParamStoresByNameData,
  GetConsoleV1ParamStoresByNameResponses,
  PostConsoleV1ParamStoresByNameData,
  PostConsoleV1ParamStoresByNameResponses,
  GetConsoleV1ProjectData,
  GetConsoleV1ProjectResponses,
  GetConsoleV1ProjectUsageBillingReportData,
  GetConsoleV1ProjectUsageBillingReportResponses,
  GetConsoleV1ProjectUsageBillingReportErrors,
  GetConsoleV1ReleasePipelineTriggersData,
  GetConsoleV1ReleasePipelineTriggersResponses,
  GetConsoleV1ReleasePipelineTriggersByIdData,
  GetConsoleV1ReleasePipelineTriggersByIdResponses,
  PutConsoleV1ReleasePipelineTriggersByIdAbortData,
  PutConsoleV1ReleasePipelineTriggersByIdAbortResponses,
  PutConsoleV1ReleasePipelineTriggersByIdApproveData,
  PutConsoleV1ReleasePipelineTriggersByIdApproveResponses,
  PutConsoleV1ReleasePipelineTriggersByIdPauseData,
  PutConsoleV1ReleasePipelineTriggersByIdPauseResponses,
  PutConsoleV1ReleasePipelineTriggersByIdRolloutData,
  PutConsoleV1ReleasePipelineTriggersByIdRolloutResponses,
  PutConsoleV1ReleasePipelineTriggersByIdSkipData,
  PutConsoleV1ReleasePipelineTriggersByIdSkipResponses,
  PutConsoleV1ReleasePipelineTriggersByIdUnpauseData,
  PutConsoleV1ReleasePipelineTriggersByIdUnpauseResponses,
  GetConsoleV1ReleasePipelinesData,
  GetConsoleV1ReleasePipelinesResponses,
  PostConsoleV1ReleasePipelinesData,
  PostConsoleV1ReleasePipelinesResponses,
  DeleteConsoleV1ReleasePipelinesByIdData,
  DeleteConsoleV1ReleasePipelinesByIdResponses,
  GetConsoleV1ReleasePipelinesByIdData,
  GetConsoleV1ReleasePipelinesByIdResponses,
  PostConsoleV1ReleasePipelinesByIdData,
  PostConsoleV1ReleasePipelinesByIdResponses,
  GetConsoleV1ReportsData,
  GetConsoleV1ReportsResponses,
  GetConsoleV1ReportsErrors,
  GetConsoleV1RolesData,
  GetConsoleV1RolesResponses,
  GetConsoleV1RolesErrors,
  PostConsoleV1RolesData,
  PostConsoleV1RolesResponses,
  PostConsoleV1RolesErrors,
  DeleteConsoleV1RolesByIdData,
  DeleteConsoleV1RolesByIdResponses,
  DeleteConsoleV1RolesByIdErrors,
  GetConsoleV1RolesByIdData,
  GetConsoleV1RolesByIdResponses,
  GetConsoleV1RolesByIdErrors,
  PatchConsoleV1RolesByIdData,
  PatchConsoleV1RolesByIdResponses,
  PatchConsoleV1RolesByIdErrors,
  GetConsoleV1SegmentsData,
  GetConsoleV1SegmentsResponses,
  GetConsoleV1SegmentsErrors,
  PostConsoleV1SegmentsData,
  PostConsoleV1SegmentsResponses,
  PostConsoleV1SegmentsErrors,
  DeleteConsoleV1SegmentsByIdData,
  DeleteConsoleV1SegmentsByIdResponses,
  DeleteConsoleV1SegmentsByIdErrors,
  GetConsoleV1SegmentsByIdData,
  GetConsoleV1SegmentsByIdResponses,
  GetConsoleV1SegmentsByIdErrors,
  PatchConsoleV1SegmentsByIdAddIdsData,
  PatchConsoleV1SegmentsByIdAddIdsResponses,
  PatchConsoleV1SegmentsByIdAddIdsErrors,
  PutConsoleV1SegmentsByIdArchiveData,
  PutConsoleV1SegmentsByIdArchiveResponses,
  PutConsoleV1SegmentsByIdArchiveErrors,
  PostConsoleV1SegmentsByIdConditionalData,
  PostConsoleV1SegmentsByIdConditionalResponses,
  PostConsoleV1SegmentsByIdConditionalErrors,
  DeleteConsoleV1SegmentsByIdIdListData,
  DeleteConsoleV1SegmentsByIdIdListResponses,
  DeleteConsoleV1SegmentsByIdIdListErrors,
  GetConsoleV1SegmentsByIdIdListData,
  GetConsoleV1SegmentsByIdIdListResponses,
  PatchConsoleV1SegmentsByIdIdListData,
  PatchConsoleV1SegmentsByIdIdListResponses,
  PatchConsoleV1SegmentsByIdIdListErrors,
  PostConsoleV1SegmentsByIdIdListResetData,
  PostConsoleV1SegmentsByIdIdListResetResponses,
  GetConsoleV1SegmentsByIdIdlistMetadataData,
  GetConsoleV1SegmentsByIdIdlistMetadataResponses,
  PatchConsoleV1SegmentsByIdRemoveIdsData,
  PatchConsoleV1SegmentsByIdRemoveIdsResponses,
  PatchConsoleV1SegmentsByIdRemoveIdsErrors,
  GetConsoleV1SettingsProjectData,
  GetConsoleV1SettingsProjectResponses,
  GetConsoleV1SettingsProjectErrors,
  PostConsoleV1SettingsProjectData,
  PostConsoleV1SettingsProjectResponses,
  PostConsoleV1SettingsProjectErrors,
  GetConsoleV1SettingsReviewsData,
  GetConsoleV1SettingsReviewsResponses,
  GetConsoleV1SettingsReviewsErrors,
  PostConsoleV1SettingsReviewsData,
  PostConsoleV1SettingsReviewsResponses,
  PostConsoleV1SettingsReviewsErrors,
  GetConsoleV1SettingsRolesData,
  GetConsoleV1SettingsRolesResponses,
  GetConsoleV1SettingsRolesErrors,
  PostConsoleV1SettingsRolesData,
  PostConsoleV1SettingsRolesResponses,
  PostConsoleV1SettingsRolesErrors,
  GetConsoleV1SettingsTeamsData,
  GetConsoleV1SettingsTeamsResponses,
  GetConsoleV1SettingsTeamsErrors,
  PostConsoleV1SettingsTeamsData,
  PostConsoleV1SettingsTeamsResponses,
  PostConsoleV1SettingsTeamsErrors,
  GetConsoleV1TagsData,
  GetConsoleV1TagsResponses,
  GetConsoleV1TagsErrors,
  PostConsoleV1TagsData,
  PostConsoleV1TagsResponses,
  DeleteConsoleV1TagsByIdData,
  DeleteConsoleV1TagsByIdResponses,
  GetConsoleV1TagsByIdData,
  GetConsoleV1TagsByIdResponses,
  GetConsoleV1TagsByIdErrors,
  PatchConsoleV1TagsByIdData,
  PatchConsoleV1TagsByIdResponses,
  GetConsoleV1TargetAppData,
  GetConsoleV1TargetAppResponses,
  GetConsoleV1TargetAppErrors,
  PatchConsoleV1TargetAppData,
  PatchConsoleV1TargetAppResponses,
  PatchConsoleV1TargetAppErrors,
  PostConsoleV1TargetAppData,
  PostConsoleV1TargetAppResponses,
  DeleteConsoleV1TargetAppByIdData,
  DeleteConsoleV1TargetAppByIdResponses,
  GetConsoleV1TargetAppByIdData,
  GetConsoleV1TargetAppByIdResponses,
  GetConsoleV1TargetAppByIdErrors,
  PatchConsoleV1TargetAppByIdData,
  PatchConsoleV1TargetAppByIdResponses,
  PatchConsoleV1TargetAppByIdErrors,
  GetConsoleV1UnitIdTypesData,
  GetConsoleV1UnitIdTypesResponses,
  GetConsoleV1UnitIdTypesErrors,
  PostConsoleV1UnitIdTypesData,
  PostConsoleV1UnitIdTypesResponses,
  PostConsoleV1UnitIdTypesErrors,
  DeleteConsoleV1UnitIdTypesByIdData,
  DeleteConsoleV1UnitIdTypesByIdResponses,
  DeleteConsoleV1UnitIdTypesByIdErrors,
  GetConsoleV1UnitIdTypesByIdData,
  GetConsoleV1UnitIdTypesByIdResponses,
  GetConsoleV1UnitIdTypesByIdErrors,
  PatchConsoleV1UnitIdTypesByIdData,
  PatchConsoleV1UnitIdTypesByIdResponses,
  PatchConsoleV1UnitIdTypesByIdErrors,
  GetConsoleV1UsersData,
  GetConsoleV1UsersResponses,
  GetConsoleV1UsersErrors,
  GetConsoleV1UsersByEmailData,
  GetConsoleV1UsersByEmailResponses,
  GetConsoleV1UsersByEmailErrors,
  PostConsoleV1UsersByEmailData,
  PostConsoleV1UsersByEmailResponses,
  PostConsoleV1UsersByEmailErrors,
  PostConsoleV1UsersInviteData,
  PostConsoleV1UsersInviteResponses,
  PostConsoleV1UsersInviteErrors,
  GetConsoleV1UsersTeamsData,
  GetConsoleV1UsersTeamsResponses,
  GetConsoleV1UsersTeamsErrors,
  PostConsoleV1UsersTeamsData,
  PostConsoleV1UsersTeamsResponses,
  PostConsoleV1UsersTeamsErrors,
  DeleteConsoleV1UsersTeamsByIdData,
  DeleteConsoleV1UsersTeamsByIdResponses,
  GetConsoleV1UsersTeamsByIdData,
  GetConsoleV1UsersTeamsByIdResponses,
  GetConsoleV1UsersTeamsByIdErrors,
  PatchConsoleV1UsersTeamsByIdData,
  PatchConsoleV1UsersTeamsByIdResponses,
  PatchConsoleV1UsersTeamsByIdErrors,
  PatchConsoleV1WhConnectionsData,
  PatchConsoleV1WhConnectionsResponses,
  PatchConsoleV1WhConnectionsErrors,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export class Alerts {
  /**
   * List Topline Alerts
   */
  public static getConsoleV1Alerts<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1AlertsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1AlertsResponses, GetConsoleV1AlertsErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/alerts',
      ...options,
    })
  }
}

export class AuditLogs {
  /**
   * List Audit Logs
   */
  public static getConsoleV1AuditLogs<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1AuditLogsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1AuditLogsResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/audit_logs',
      ...options,
    })
  }
}

export class Autotunes {
  /**
   * List Autotune
   */
  public static getConsoleV1Autotunes<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1AutotunesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1AutotunesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/autotunes',
      ...options,
    })
  }

  /**
   * Create Autotune
   */
  public static postConsoleV1Autotunes<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1AutotunesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1AutotunesResponses,
      PostConsoleV1AutotunesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/autotunes',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Autotune
   */
  public static deleteConsoleV1AutotunesById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1AutotunesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1AutotunesByIdResponses,
      DeleteConsoleV1AutotunesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/autotunes/{id}',
      ...options,
    })
  }

  /**
   * Read Autotune
   */
  public static getConsoleV1AutotunesById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1AutotunesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1AutotunesByIdResponses,
      GetConsoleV1AutotunesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/autotunes/{id}',
      ...options,
    })
  }

  /**
   * Partially Update Autotune
   * Update selected properties of the experiment
   */
  public static patchConsoleV1AutotunesById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1AutotunesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1AutotunesByIdResponses,
      PatchConsoleV1AutotunesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/autotunes/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Fully Update Autotune
   * Update all properties of the experiment
   */
  public static postConsoleV1AutotunesById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1AutotunesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1AutotunesByIdResponses,
      PostConsoleV1AutotunesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/autotunes/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Finish Experiment Early
   */
  public static putConsoleV1AutotunesByIdMakeDecision<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1AutotunesByIdMakeDecisionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1AutotunesByIdMakeDecisionResponses,
      PutConsoleV1AutotunesByIdMakeDecisionErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/autotunes/{id}/make_decision',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Reset Experiment
   */
  public static putConsoleV1AutotunesByIdReset<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1AutotunesByIdResetData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1AutotunesByIdResetResponses,
      PutConsoleV1AutotunesByIdResetErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/autotunes/{id}/reset',
      ...options,
    })
  }

  /**
   * Start Autotune Experiment
   */
  public static putConsoleV1AutotunesByIdStart<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1AutotunesByIdStartData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1AutotunesByIdStartResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/autotunes/{id}/start',
      ...options,
    })
  }
}

export class Configs {
  /**
   * Change Validation
   */
  public static postConsoleV1ChangeValidation<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ChangeValidationData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1ChangeValidationResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/change_validation',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Update change validation message
   */
  public static patchConsoleV1ChangeValidationMessage<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1ChangeValidationMessageData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1ChangeValidationMessageResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/change_validation/message',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Read Exposure Event Count
   * Get the count of exposure events recently received by Statsig.
   */
  public static getConsoleV1ExposureCount<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ExposureCountData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1ExposureCountResponses,
      GetConsoleV1ExposureCountErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/exposure_count',
      ...options,
    })
  }
}

export class Company {
  /**
   * Get Company Info
   */
  public static getConsoleV1Company<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1CompanyData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1CompanyResponses,
      GetConsoleV1CompanyErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/company',
      ...options,
    })
  }
}

export class Mcp {
  /**
   * Get Company Info
   */
  public static getConsoleV1Company<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1CompanyData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1CompanyResponses,
      GetConsoleV1CompanyErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/company',
      ...options,
    })
  }

  /**
   * List Dynamic Configs
   */
  public static getConsoleV1DynamicConfigs<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1DynamicConfigsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1DynamicConfigsResponses,
      GetConsoleV1DynamicConfigsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs',
      ...options,
    })
  }

  /**
   * Create Dynamic Config
   */
  public static postConsoleV1DynamicConfigs<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1DynamicConfigsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1DynamicConfigsResponses,
      PostConsoleV1DynamicConfigsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Dynamic Config
   */
  public static deleteConsoleV1DynamicConfigsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1DynamicConfigsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1DynamicConfigsByIdResponses,
      DeleteConsoleV1DynamicConfigsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}',
      ...options,
    })
  }

  /**
   * Get Dynamic Config
   */
  public static getConsoleV1DynamicConfigsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1DynamicConfigsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1DynamicConfigsByIdResponses,
      GetConsoleV1DynamicConfigsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}',
      ...options,
    })
  }

  /**
   * Partially Update Dynamic Config
   */
  public static patchConsoleV1DynamicConfigsById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1DynamicConfigsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1DynamicConfigsByIdResponses,
      PatchConsoleV1DynamicConfigsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Fully Update Dynamic Config
   */
  public static postConsoleV1DynamicConfigsById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1DynamicConfigsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1DynamicConfigsByIdResponses,
      PostConsoleV1DynamicConfigsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Disable Dynamic Config
   */
  public static putConsoleV1DynamicConfigsByIdDisable<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1DynamicConfigsByIdDisableData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1DynamicConfigsByIdDisableResponses, unknown, ThrowOnError>(
      {
        security: [
          {
            name: 'STATSIG-API-KEY',
            type: 'apiKey',
          },
        ],
        url: '/console/v1/dynamic_configs/{id}/disable',
        ...options,
      },
    )
  }

  /**
   * Enable Dynamic Config
   */
  public static putConsoleV1DynamicConfigsByIdEnable<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1DynamicConfigsByIdEnableData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1DynamicConfigsByIdEnableResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}/enable',
      ...options,
    })
  }

  /**
   * List Dynamic Config Versions
   */
  public static getConsoleV1DynamicConfigsByIdVersions<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1DynamicConfigsByIdVersionsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1DynamicConfigsByIdVersionsResponses,
      GetConsoleV1DynamicConfigsByIdVersionsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}/versions',
      ...options,
    })
  }

  /**
   * List Events
   */
  public static getConsoleV1Events<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1EventsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1EventsResponses, GetConsoleV1EventsErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/events',
      ...options,
    })
  }

  /**
   * Get specific events
   */
  public static getConsoleV1EventsByEventName<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1EventsByEventNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1EventsByEventNameResponses,
      GetConsoleV1EventsByEventNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/events/{eventName}',
      ...options,
    })
  }

  /**
   * Get metrics using event name
   */
  public static getConsoleV1EventsByEventNameMetrics<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1EventsByEventNameMetricsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1EventsByEventNameMetricsResponses,
      GetConsoleV1EventsByEventNameMetricsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/events/{eventName}/metrics',
      ...options,
    })
  }

  /**
   * List Experiments
   */
  public static getConsoleV1Experiments<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ExperimentsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsResponses,
      GetConsoleV1ExperimentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments',
      ...options,
    })
  }

  /**
   * Create Experiment
   */
  public static postConsoleV1Experiments<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsResponses,
      PostConsoleV1ExperimentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Deleted Experiment
   */
  public static deleteConsoleV1ExperimentsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1ExperimentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1ExperimentsByIdResponses,
      DeleteConsoleV1ExperimentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}',
      ...options,
    })
  }

  /**
   * Get Experiment
   */
  public static getConsoleV1ExperimentsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsByIdResponses,
      GetConsoleV1ExperimentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}',
      ...options,
    })
  }

  /**
   * Partially Update Experiment
   */
  public static patchConsoleV1ExperimentsById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1ExperimentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1ExperimentsByIdResponses,
      PatchConsoleV1ExperimentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Fully Update Experiment
   */
  public static postConsoleV1ExperimentsById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsByIdResponses,
      PostConsoleV1ExperimentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Abandon Experiment
   */
  public static putConsoleV1ExperimentsByIdAbandon<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdAbandonData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdAbandonResponses,
      PutConsoleV1ExperimentsByIdAbandonErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/abandon',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Archive Experiment
   */
  public static putConsoleV1ExperimentsByIdArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdArchiveResponses,
      PutConsoleV1ExperimentsByIdArchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/archive',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Retrieve cumulative exposures
   */
  public static getConsoleV1ExperimentsByIdCumulativeExposures<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsByIdCumulativeExposuresData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsByIdCumulativeExposuresResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/cumulative_exposures',
      ...options,
    })
  }

  /**
   * Disable Experiment Groups
   */
  public static postConsoleV1ExperimentsByIdDisableGroups<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsByIdDisableGroupsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsByIdDisableGroupsResponses,
      PostConsoleV1ExperimentsByIdDisableGroupsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/disable_groups',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Enable Experiment Groups
   */
  public static postConsoleV1ExperimentsByIdEnableGroups<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsByIdEnableGroupsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsByIdEnableGroupsResponses,
      PostConsoleV1ExperimentsByIdEnableGroupsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/enable_groups',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Load Pulse (Warehouse Native)
   */
  public static postConsoleV1ExperimentsByIdLoadPulse<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsByIdLoadPulseData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsByIdLoadPulseResponses,
      PostConsoleV1ExperimentsByIdLoadPulseErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/load_pulse',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Finish Experiment Early
   */
  public static putConsoleV1ExperimentsByIdMakeDecision<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdMakeDecisionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdMakeDecisionResponses,
      PutConsoleV1ExperimentsByIdMakeDecisionErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/make_decision',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Pulse Load History (Warehouse Native)
   */
  public static getConsoleV1ExperimentsByIdPulseLoadHistory<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsByIdPulseLoadHistoryData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsByIdPulseLoadHistoryResponses,
      GetConsoleV1ExperimentsByIdPulseLoadHistoryErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/pulse_load_history',
      ...options,
    })
  }

  /**
   * Retrieve Pulse Results (Beta)
   */
  public static getConsoleV1ExperimentsByIdPulseResults<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsByIdPulseResultsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsByIdPulseResultsResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/pulse_results',
      ...options,
    })
  }

  /**
   * Reset Experiment
   */
  public static putConsoleV1ExperimentsByIdReset<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdResetData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdResetResponses,
      PutConsoleV1ExperimentsByIdResetErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/reset',
      ...options,
    })
  }

  /**
   * Start Experiment
   */
  public static putConsoleV1ExperimentsByIdStart<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdStartData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdStartResponses,
      PutConsoleV1ExperimentsByIdStartErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/start',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Unarchive Experiment
   */
  public static putConsoleV1ExperimentsByIdUnarchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdUnarchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdUnarchiveResponses,
      PutConsoleV1ExperimentsByIdUnarchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/unarchive',
      ...options,
    })
  }

  /**
   * Delete Assignment Source
   */
  public static deleteConsoleV1ExperimentsAssignmentSourceByName<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1ExperimentsAssignmentSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1ExperimentsAssignmentSourceByNameResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_source/{name}',
      ...options,
    })
  }

  /**
   * Patch Assignment Source
   */
  public static patchConsoleV1ExperimentsAssignmentSourceByName<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1ExperimentsAssignmentSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1ExperimentsAssignmentSourceByNameResponses,
      PatchConsoleV1ExperimentsAssignmentSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_source/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Post Assignment Source
   */
  public static postConsoleV1ExperimentsAssignmentSourceByName<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsAssignmentSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsAssignmentSourceByNameResponses,
      PostConsoleV1ExperimentsAssignmentSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_source/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Assignment Sources
   */
  public static getConsoleV1ExperimentsAssignmentSources<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ExperimentsAssignmentSourcesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsAssignmentSourcesResponses,
      GetConsoleV1ExperimentsAssignmentSourcesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_sources',
      ...options,
    })
  }

  /**
   * Create Assignment Source
   */
  public static postConsoleV1ExperimentsAssignmentSources<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsAssignmentSourcesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsAssignmentSourcesResponses,
      PostConsoleV1ExperimentsAssignmentSourcesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_sources',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Entity Property Sources
   */
  public static getConsoleV1ExperimentsEntityProperties<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ExperimentsEntityPropertiesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsEntityPropertiesResponses,
      GetConsoleV1ExperimentsEntityPropertiesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_properties',
      ...options,
    })
  }

  /**
   * Create Entity Property Source
   */
  public static postConsoleV1ExperimentsEntityProperties<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsEntityPropertiesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsEntityPropertiesResponses,
      PostConsoleV1ExperimentsEntityPropertiesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_properties',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Entity Property Source
   */
  public static deleteConsoleV1ExperimentsEntityPropertyByName<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1ExperimentsEntityPropertyByNameResponses,
      DeleteConsoleV1ExperimentsEntityPropertyByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_property/{name}',
      ...options,
    })
  }

  /**
   * Get Entity Property Source
   */
  public static getConsoleV1ExperimentsEntityPropertyByName<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsEntityPropertyByNameResponses,
      GetConsoleV1ExperimentsEntityPropertyByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_property/{name}',
      ...options,
    })
  }

  /**
   * Patch Entity Property Source
   */
  public static patchConsoleV1ExperimentsEntityPropertyByName<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1ExperimentsEntityPropertyByNameResponses,
      PatchConsoleV1ExperimentsEntityPropertyByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_property/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Post Entity Property Source
   */
  public static postConsoleV1ExperimentsEntityPropertyByName<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsEntityPropertyByNameResponses,
      PostConsoleV1ExperimentsEntityPropertyByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_property/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Gates
   */
  public static getConsoleV1Gates<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1GatesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1GatesResponses, GetConsoleV1GatesErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates',
      ...options,
    })
  }

  /**
   * Create Gate
   */
  public static postConsoleV1Gates<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1GatesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1GatesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Gates
   */
  public static deleteConsoleV1GatesById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1GatesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<DeleteConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}',
      ...options,
    })
  }

  /**
   * Read Gate
   */
  public static getConsoleV1GatesById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1GatesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}',
      ...options,
    })
  }

  /**
   * Partially Update Gates
   */
  public static patchConsoleV1GatesById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1GatesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<PatchConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Fully Update Gates
   */
  public static postConsoleV1GatesById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1GatesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Archive Gate
   */
  public static putConsoleV1GatesByIdArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdArchiveResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/archive',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Disable Gate
   */
  public static putConsoleV1GatesByIdDisable<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdDisableData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdDisableResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/disable',
      ...options,
    })
  }

  /**
   * Enable Gate
   */
  public static putConsoleV1GatesByIdEnable<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdEnableData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdEnableResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/enable',
      ...options,
    })
  }

  /**
   * Launch Gate
   */
  public static putConsoleV1GatesByIdLaunch<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdLaunchData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdLaunchResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/launch',
      ...options,
    })
  }

  /**
   * Load Pulse Gate
   */
  public static postConsoleV1GatesByIdLoadPulse<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1GatesByIdLoadPulseData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdLoadPulseResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/load_pulse',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Unarchive Gate
   */
  public static putConsoleV1GatesByIdUnarchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdUnarchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdUnarchiveResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/unarchive',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Gate Versions
   */
  public static getConsoleV1GatesByIdVersions<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1GatesByIdVersionsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1GatesByIdVersionsResponses,
      GetConsoleV1GatesByIdVersionsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/versions',
      ...options,
    })
  }

  /**
   * Get Layers
   */
  public static getConsoleV1Layers<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1LayersData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1LayersResponses, GetConsoleV1LayersErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers',
      ...options,
    })
  }

  /**
   * Create a Layer
   */
  public static postConsoleV1Layers<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1LayersData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1LayersResponses,
      PostConsoleV1LayersErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete a layer
   */
  public static deleteConsoleV1LayersById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1LayersByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1LayersByIdResponses,
      DeleteConsoleV1LayersByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}',
      ...options,
    })
  }

  /**
   * Get one layer
   */
  public static getConsoleV1LayersById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1LayersByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1LayersByIdResponses,
      GetConsoleV1LayersByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}',
      ...options,
    })
  }

  /**
   * Partially update a layer
   */
  public static patchConsoleV1LayersById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1LayersByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1LayersByIdResponses,
      PatchConsoleV1LayersByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Update a layer
   */
  public static postConsoleV1LayersById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1LayersByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1LayersByIdResponses,
      PostConsoleV1LayersByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Read Single Metric Value
   */
  public static getConsoleV1Metrics<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1MetricsResponses, GetConsoleV1MetricsErrors, ThrowOnError>(
      {
        security: [
          {
            name: 'STATSIG-API-KEY',
            type: 'apiKey',
          },
        ],
        url: '/console/v1/metrics',
        ...options,
      },
    )
  }

  /**
   * Create Metric
   */
  public static postConsoleV1Metrics<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsResponses,
      PostConsoleV1MetricsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete a metric
   */
  public static deleteConsoleV1MetricsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1MetricsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1MetricsByIdResponses,
      DeleteConsoleV1MetricsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}',
      ...options,
    })
  }

  /**
   * Read Metric Definition
   */
  public static getConsoleV1MetricsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1MetricsByIdResponses,
      GetConsoleV1MetricsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}',
      ...options,
    })
  }

  /**
   * Update a metric
   */
  public static postConsoleV1MetricsById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsByIdResponses,
      PostConsoleV1MetricsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Cancel archive a metric
   */
  public static putConsoleV1MetricsByIdCancelArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1MetricsByIdCancelArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1MetricsByIdCancelArchiveResponses,
      PutConsoleV1MetricsByIdCancelArchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/cancel_archive',
      ...options,
    })
  }

  /**
   * Lineage: List experiments related to Metric
   */
  public static getConsoleV1MetricsByIdExperiments<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsByIdExperimentsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1MetricsByIdExperimentsResponses,
      GetConsoleV1MetricsByIdExperimentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/experiments',
      ...options,
    })
  }

  /**
   * Reload metric data
   */
  public static postConsoleV1MetricsByIdReload<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsByIdReloadData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsByIdReloadResponses,
      PostConsoleV1MetricsByIdReloadErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/reload',
      ...options,
    })
  }

  /**
   * Schedule a metric archive
   */
  public static putConsoleV1MetricsByIdScheduleArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1MetricsByIdScheduleArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1MetricsByIdScheduleArchiveResponses,
      PutConsoleV1MetricsByIdScheduleArchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/schedule_archive',
      ...options,
    })
  }

  /**
   * Unarchive a metric
   */
  public static putConsoleV1MetricsByIdUnarchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1MetricsByIdUnarchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1MetricsByIdUnarchiveResponses,
      PutConsoleV1MetricsByIdUnarchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/unarchive',
      ...options,
    })
  }

  /**
   * List all Metrics
   */
  public static getConsoleV1MetricsList<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1MetricsListData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1MetricsListResponses,
      GetConsoleV1MetricsListErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/list',
      ...options,
    })
  }

  /**
   * Create Metric Source
   */
  public static postConsoleV1MetricsMetricSource<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsMetricSourceData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsMetricSourceResponses,
      PostConsoleV1MetricsMetricSourceErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Metric Source
   */
  public static deleteConsoleV1MetricsMetricSourceByName<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1MetricsMetricSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1MetricsMetricSourceByNameResponses,
      DeleteConsoleV1MetricsMetricSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/{name}',
      ...options,
    })
  }

  /**
   * Read Metric Source
   */
  public static getConsoleV1MetricsMetricSourceByName<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsMetricSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1MetricsMetricSourceByNameResponses,
      GetConsoleV1MetricsMetricSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/{name}',
      ...options,
    })
  }

  /**
   * Update Metric Source
   */
  public static postConsoleV1MetricsMetricSourceByName<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsMetricSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsMetricSourceByNameResponses,
      PostConsoleV1MetricsMetricSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Read Metric Source Metrics
   */
  public static getConsoleV1MetricsMetricSourceByNameMetrics<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsMetricSourceByNameMetricsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1MetricsMetricSourceByNameMetricsResponses,
      GetConsoleV1MetricsMetricSourceByNameMetricsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/{name}/metrics',
      ...options,
    })
  }

  /**
   * List metric source
   */
  public static getConsoleV1MetricsMetricSourceList<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1MetricsMetricSourceListData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1MetricsMetricSourceListResponses,
      GetConsoleV1MetricsMetricSourceListErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/list',
      ...options,
    })
  }

  /**
   * Get Report in CSV format
   */
  public static getConsoleV1ProjectUsageBillingReport<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ProjectUsageBillingReportData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ProjectUsageBillingReportResponses,
      GetConsoleV1ProjectUsageBillingReportErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/project/usage_billing/report',
      ...options,
    })
  }

  /**
   * List Segments
   */
  public static getConsoleV1Segments<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1SegmentsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1SegmentsResponses,
      GetConsoleV1SegmentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments',
      ...options,
    })
  }

  /**
   * Create Segment
   */
  public static postConsoleV1Segments<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1SegmentsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1SegmentsResponses,
      PostConsoleV1SegmentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Segment
   */
  public static deleteConsoleV1SegmentsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1SegmentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1SegmentsByIdResponses,
      DeleteConsoleV1SegmentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}',
      ...options,
    })
  }

  /**
   * Get Segment
   */
  public static getConsoleV1SegmentsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1SegmentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1SegmentsByIdResponses,
      GetConsoleV1SegmentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}',
      ...options,
    })
  }

  /**
   * Archive Segment
   */
  public static putConsoleV1SegmentsByIdArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1SegmentsByIdArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1SegmentsByIdArchiveResponses,
      PutConsoleV1SegmentsByIdArchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}/archive',
      ...options,
    })
  }

  /**
   * List Tags
   */
  public static getConsoleV1Tags<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1TagsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1TagsResponses, GetConsoleV1TagsErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags',
      ...options,
    })
  }

  /**
   * Create Tag
   */
  public static postConsoleV1Tags<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1TagsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1TagsResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Tag
   */
  public static deleteConsoleV1TagsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1TagsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<DeleteConsoleV1TagsByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags/{id}',
      ...options,
    })
  }

  /**
   * Read Tag
   */
  public static getConsoleV1TagsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1TagsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1TagsByIdResponses,
      GetConsoleV1TagsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags/{id}',
      ...options,
    })
  }

  /**
   * Update Tag
   */
  public static patchConsoleV1TagsById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1TagsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<PatchConsoleV1TagsByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Users
   */
  public static getConsoleV1Users<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1UsersData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1UsersResponses, GetConsoleV1UsersErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users',
      ...options,
    })
  }

  /**
   * Get user by email
   */
  public static getConsoleV1UsersByEmail<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1UsersByEmailData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1UsersByEmailResponses,
      GetConsoleV1UsersByEmailErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/{email}',
      ...options,
    })
  }

  /**
   * Update user
   */
  public static postConsoleV1UsersByEmail<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1UsersByEmailData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1UsersByEmailResponses,
      PostConsoleV1UsersByEmailErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/{email}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Invite user. To avoid spamming, invitation emails are not sent. Invitee will see invitation notification in-app after logging in.
   */
  public static postConsoleV1UsersInvite<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1UsersInviteData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1UsersInviteResponses,
      PostConsoleV1UsersInviteErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/invite',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Teams
   */
  public static getConsoleV1UsersTeams<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1UsersTeamsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1UsersTeamsResponses,
      GetConsoleV1UsersTeamsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams',
      ...options,
    })
  }

  /**
   * Create Team
   */
  public static postConsoleV1UsersTeams<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1UsersTeamsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1UsersTeamsResponses,
      PostConsoleV1UsersTeamsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Team
   */
  public static deleteConsoleV1UsersTeamsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1UsersTeamsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<DeleteConsoleV1UsersTeamsByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams/{id}',
      ...options,
    })
  }

  /**
   * Get Team
   */
  public static getConsoleV1UsersTeamsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1UsersTeamsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1UsersTeamsByIdResponses,
      GetConsoleV1UsersTeamsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams/{id}',
      ...options,
    })
  }

  /**
   * Update Team. Ops: Replace. Use GET for current data if you intent to Add.
   */
  public static patchConsoleV1UsersTeamsById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1UsersTeamsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1UsersTeamsByIdResponses,
      PatchConsoleV1UsersTeamsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class DynamicConfigs {
  /**
   * List Dynamic Configs
   */
  public static getConsoleV1DynamicConfigs<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1DynamicConfigsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1DynamicConfigsResponses,
      GetConsoleV1DynamicConfigsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs',
      ...options,
    })
  }

  /**
   * Create Dynamic Config
   */
  public static postConsoleV1DynamicConfigs<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1DynamicConfigsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1DynamicConfigsResponses,
      PostConsoleV1DynamicConfigsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Dynamic Config
   */
  public static deleteConsoleV1DynamicConfigsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1DynamicConfigsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1DynamicConfigsByIdResponses,
      DeleteConsoleV1DynamicConfigsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}',
      ...options,
    })
  }

  /**
   * Get Dynamic Config
   */
  public static getConsoleV1DynamicConfigsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1DynamicConfigsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1DynamicConfigsByIdResponses,
      GetConsoleV1DynamicConfigsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}',
      ...options,
    })
  }

  /**
   * Partially Update Dynamic Config
   */
  public static patchConsoleV1DynamicConfigsById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1DynamicConfigsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1DynamicConfigsByIdResponses,
      PatchConsoleV1DynamicConfigsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Fully Update Dynamic Config
   */
  public static postConsoleV1DynamicConfigsById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1DynamicConfigsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1DynamicConfigsByIdResponses,
      PostConsoleV1DynamicConfigsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Disable Dynamic Config
   */
  public static putConsoleV1DynamicConfigsByIdDisable<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1DynamicConfigsByIdDisableData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1DynamicConfigsByIdDisableResponses, unknown, ThrowOnError>(
      {
        security: [
          {
            name: 'STATSIG-API-KEY',
            type: 'apiKey',
          },
        ],
        url: '/console/v1/dynamic_configs/{id}/disable',
        ...options,
      },
    )
  }

  /**
   * Enable Dynamic Config
   */
  public static putConsoleV1DynamicConfigsByIdEnable<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1DynamicConfigsByIdEnableData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1DynamicConfigsByIdEnableResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}/enable',
      ...options,
    })
  }

  /**
   * Delete Dynamic Config Rule
   */
  public static deleteConsoleV1DynamicConfigsByIdRuleByRuleId<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1DynamicConfigsByIdRuleByRuleIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}/rule/{ruleId}',
      ...options,
    })
  }

  /**
   * Get Specific Dynamic Config Rule
   */
  public static getConsoleV1DynamicConfigsByIdRuleByRuleId<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1DynamicConfigsByIdRuleByRuleIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}/rule/{ruleId}',
      ...options,
    })
  }

  /**
   * Update Dynamic Config Rule By Id
   */
  public static patchConsoleV1DynamicConfigsByIdRuleByRuleId<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1DynamicConfigsByIdRuleByRuleIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1DynamicConfigsByIdRuleByRuleIdResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}/rule/{ruleId}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Get Dynamic Config Rules
   */
  public static getConsoleV1DynamicConfigsByIdRules<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1DynamicConfigsByIdRulesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1DynamicConfigsByIdRulesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}/rules',
      ...options,
    })
  }

  /**
   * List Dynamic Config Versions
   */
  public static getConsoleV1DynamicConfigsByIdVersions<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1DynamicConfigsByIdVersionsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1DynamicConfigsByIdVersionsResponses,
      GetConsoleV1DynamicConfigsByIdVersionsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/dynamic_configs/{id}/versions',
      ...options,
    })
  }
}

export class Environments {
  /**
   * Get Environments
   */
  public static getConsoleV1Environments<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1EnvironmentsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1EnvironmentsResponses,
      GetConsoleV1EnvironmentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/environments',
      ...options,
    })
  }

  /**
   * Update Environments
   */
  public static postConsoleV1Environments<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1EnvironmentsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1EnvironmentsResponses,
      PostConsoleV1EnvironmentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/environments',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class Events {
  /**
   * List Events
   */
  public static getConsoleV1Events<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1EventsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1EventsResponses, GetConsoleV1EventsErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/events',
      ...options,
    })
  }

  /**
   * Get specific events
   */
  public static getConsoleV1EventsByEventName<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1EventsByEventNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1EventsByEventNameResponses,
      GetConsoleV1EventsByEventNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/events/{eventName}',
      ...options,
    })
  }

  /**
   * Get metrics using event name
   */
  public static getConsoleV1EventsByEventNameMetrics<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1EventsByEventNameMetricsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1EventsByEventNameMetricsResponses,
      GetConsoleV1EventsByEventNameMetricsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/events/{eventName}/metrics',
      ...options,
    })
  }
}

export class Experiments {
  /**
   * List Experiments
   */
  public static getConsoleV1Experiments<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ExperimentsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsResponses,
      GetConsoleV1ExperimentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments',
      ...options,
    })
  }

  /**
   * Create Experiment
   */
  public static postConsoleV1Experiments<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsResponses,
      PostConsoleV1ExperimentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Deleted Experiment
   */
  public static deleteConsoleV1ExperimentsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1ExperimentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1ExperimentsByIdResponses,
      DeleteConsoleV1ExperimentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}',
      ...options,
    })
  }

  /**
   * Get Experiment
   */
  public static getConsoleV1ExperimentsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsByIdResponses,
      GetConsoleV1ExperimentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}',
      ...options,
    })
  }

  /**
   * Partially Update Experiment
   */
  public static patchConsoleV1ExperimentsById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1ExperimentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1ExperimentsByIdResponses,
      PatchConsoleV1ExperimentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Fully Update Experiment
   */
  public static postConsoleV1ExperimentsById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsByIdResponses,
      PostConsoleV1ExperimentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Abandon Experiment
   */
  public static putConsoleV1ExperimentsByIdAbandon<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdAbandonData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdAbandonResponses,
      PutConsoleV1ExperimentsByIdAbandonErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/abandon',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Archive Experiment
   */
  public static putConsoleV1ExperimentsByIdArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdArchiveResponses,
      PutConsoleV1ExperimentsByIdArchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/archive',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Retrieve cumulative exposures
   */
  public static getConsoleV1ExperimentsByIdCumulativeExposures<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsByIdCumulativeExposuresData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsByIdCumulativeExposuresResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/cumulative_exposures',
      ...options,
    })
  }

  /**
   * Disable Experiment Groups
   */
  public static postConsoleV1ExperimentsByIdDisableGroups<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsByIdDisableGroupsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsByIdDisableGroupsResponses,
      PostConsoleV1ExperimentsByIdDisableGroupsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/disable_groups',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Enable Experiment Groups
   */
  public static postConsoleV1ExperimentsByIdEnableGroups<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsByIdEnableGroupsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsByIdEnableGroupsResponses,
      PostConsoleV1ExperimentsByIdEnableGroupsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/enable_groups',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Finish Experiment Early
   */
  public static putConsoleV1ExperimentsByIdMakeDecision<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdMakeDecisionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdMakeDecisionResponses,
      PutConsoleV1ExperimentsByIdMakeDecisionErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/make_decision',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Experiment Overrides
   */
  public static deleteConsoleV1ExperimentsByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1ExperimentsByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1ExperimentsByIdOverridesResponses,
      DeleteConsoleV1ExperimentsByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/overrides',
      ...options,
    })
  }

  /**
   * Get Experiment Overrides
   */
  public static getConsoleV1ExperimentsByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsByIdOverridesResponses,
      GetConsoleV1ExperimentsByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/overrides',
      ...options,
    })
  }

  /**
   * Partially Update Experiment Overrides
   */
  public static patchConsoleV1ExperimentsByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1ExperimentsByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1ExperimentsByIdOverridesResponses,
      PatchConsoleV1ExperimentsByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/overrides',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Update Experiment Overrides
   */
  public static postConsoleV1ExperimentsByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsByIdOverridesResponses,
      PostConsoleV1ExperimentsByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/overrides',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Retrieve Pulse Results (Beta)
   */
  public static getConsoleV1ExperimentsByIdPulseResults<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsByIdPulseResultsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsByIdPulseResultsResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/pulse_results',
      ...options,
    })
  }

  /**
   * Reset Experiment
   */
  public static putConsoleV1ExperimentsByIdReset<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdResetData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdResetResponses,
      PutConsoleV1ExperimentsByIdResetErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/reset',
      ...options,
    })
  }

  /**
   * Start Experiment
   */
  public static putConsoleV1ExperimentsByIdStart<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdStartData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdStartResponses,
      PutConsoleV1ExperimentsByIdStartErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/start',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Unarchive Experiment
   */
  public static putConsoleV1ExperimentsByIdUnarchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ExperimentsByIdUnarchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ExperimentsByIdUnarchiveResponses,
      PutConsoleV1ExperimentsByIdUnarchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/unarchive',
      ...options,
    })
  }
}

export class ExperimentsWarehouseNative {
  /**
   * Load Pulse (Warehouse Native)
   */
  public static postConsoleV1ExperimentsByIdLoadPulse<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsByIdLoadPulseData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsByIdLoadPulseResponses,
      PostConsoleV1ExperimentsByIdLoadPulseErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/load_pulse',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Pulse Load History (Warehouse Native)
   */
  public static getConsoleV1ExperimentsByIdPulseLoadHistory<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsByIdPulseLoadHistoryData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsByIdPulseLoadHistoryResponses,
      GetConsoleV1ExperimentsByIdPulseLoadHistoryErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/{id}/pulse_load_history',
      ...options,
    })
  }

  /**
   * Delete Assignment Source
   */
  public static deleteConsoleV1ExperimentsAssignmentSourceByName<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1ExperimentsAssignmentSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1ExperimentsAssignmentSourceByNameResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_source/{name}',
      ...options,
    })
  }

  /**
   * Patch Assignment Source
   */
  public static patchConsoleV1ExperimentsAssignmentSourceByName<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1ExperimentsAssignmentSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1ExperimentsAssignmentSourceByNameResponses,
      PatchConsoleV1ExperimentsAssignmentSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_source/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Post Assignment Source
   */
  public static postConsoleV1ExperimentsAssignmentSourceByName<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsAssignmentSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsAssignmentSourceByNameResponses,
      PostConsoleV1ExperimentsAssignmentSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_source/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Assignment Sources
   */
  public static getConsoleV1ExperimentsAssignmentSources<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ExperimentsAssignmentSourcesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsAssignmentSourcesResponses,
      GetConsoleV1ExperimentsAssignmentSourcesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_sources',
      ...options,
    })
  }

  /**
   * Create Assignment Source
   */
  public static postConsoleV1ExperimentsAssignmentSources<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsAssignmentSourcesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsAssignmentSourcesResponses,
      PostConsoleV1ExperimentsAssignmentSourcesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/assignment_sources',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Entity Property Sources
   */
  public static getConsoleV1ExperimentsEntityProperties<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ExperimentsEntityPropertiesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsEntityPropertiesResponses,
      GetConsoleV1ExperimentsEntityPropertiesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_properties',
      ...options,
    })
  }

  /**
   * Create Entity Property Source
   */
  public static postConsoleV1ExperimentsEntityProperties<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsEntityPropertiesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsEntityPropertiesResponses,
      PostConsoleV1ExperimentsEntityPropertiesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_properties',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Entity Property Source
   */
  public static deleteConsoleV1ExperimentsEntityPropertyByName<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1ExperimentsEntityPropertyByNameResponses,
      DeleteConsoleV1ExperimentsEntityPropertyByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_property/{name}',
      ...options,
    })
  }

  /**
   * Get Entity Property Source
   */
  public static getConsoleV1ExperimentsEntityPropertyByName<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsEntityPropertyByNameResponses,
      GetConsoleV1ExperimentsEntityPropertyByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_property/{name}',
      ...options,
    })
  }

  /**
   * Patch Entity Property Source
   */
  public static patchConsoleV1ExperimentsEntityPropertyByName<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1ExperimentsEntityPropertyByNameResponses,
      PatchConsoleV1ExperimentsEntityPropertyByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_property/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Post Entity Property Source
   */
  public static postConsoleV1ExperimentsEntityPropertyByName<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsEntityPropertyByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsEntityPropertyByNameResponses,
      PostConsoleV1ExperimentsEntityPropertyByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/entity_property/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List qualifying event
   */
  public static getConsoleV1ExperimentsQualifyingEvents<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ExperimentsQualifyingEventsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsQualifyingEventsResponses,
      GetConsoleV1ExperimentsQualifyingEventsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/qualifying_events',
      ...options,
    })
  }

  /**
   * Create Qualifying Event
   */
  public static postConsoleV1ExperimentsQualifyingEvents<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsQualifyingEventsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsQualifyingEventsResponses,
      PostConsoleV1ExperimentsQualifyingEventsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/qualifying_events',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Qualifying Event
   */
  public static deleteConsoleV1ExperimentsQualifyingEventsByName<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1ExperimentsQualifyingEventsByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1ExperimentsQualifyingEventsByNameResponses,
      DeleteConsoleV1ExperimentsQualifyingEventsByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/qualifying_events/{name}',
      ...options,
    })
  }

  /**
   * Read Qualifying Event
   */
  public static getConsoleV1ExperimentsQualifyingEventsByName<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ExperimentsQualifyingEventsByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ExperimentsQualifyingEventsByNameResponses,
      GetConsoleV1ExperimentsQualifyingEventsByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/qualifying_events/{name}',
      ...options,
    })
  }

  /**
   * Update Qualifying Event
   */
  public static postConsoleV1ExperimentsQualifyingEventsByName<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ExperimentsQualifyingEventsByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1ExperimentsQualifyingEventsByNameResponses,
      PostConsoleV1ExperimentsQualifyingEventsByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/experiments/qualifying_events/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class Gates {
  /**
   * List Gates
   */
  public static getConsoleV1Gates<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1GatesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1GatesResponses, GetConsoleV1GatesErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates',
      ...options,
    })
  }

  /**
   * Create Gate
   */
  public static postConsoleV1Gates<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1GatesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1GatesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Gates
   */
  public static deleteConsoleV1GatesById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1GatesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<DeleteConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}',
      ...options,
    })
  }

  /**
   * Read Gate
   */
  public static getConsoleV1GatesById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1GatesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}',
      ...options,
    })
  }

  /**
   * Partially Update Gates
   */
  public static patchConsoleV1GatesById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1GatesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<PatchConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Fully Update Gates
   */
  public static postConsoleV1GatesById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1GatesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Archive Gate
   */
  public static putConsoleV1GatesByIdArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdArchiveResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/archive',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Disable Gate
   */
  public static putConsoleV1GatesByIdDisable<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdDisableData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdDisableResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/disable',
      ...options,
    })
  }

  /**
   * Enable Gate
   */
  public static putConsoleV1GatesByIdEnable<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdEnableData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdEnableResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/enable',
      ...options,
    })
  }

  /**
   * Launch Gate
   */
  public static putConsoleV1GatesByIdLaunch<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdLaunchData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdLaunchResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/launch',
      ...options,
    })
  }

  /**
   * Load Pulse Gate
   */
  public static postConsoleV1GatesByIdLoadPulse<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1GatesByIdLoadPulseData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdLoadPulseResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/load_pulse',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Gate Overrides
   */
  public static deleteConsoleV1GatesByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1GatesByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<DeleteConsoleV1GatesByIdOverridesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/overrides',
      ...options,
    })
  }

  /**
   * Get Gate Override
   */
  public static getConsoleV1GatesByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1GatesByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1GatesByIdOverridesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/overrides',
      ...options,
    })
  }

  /**
   * Add Gate Overrides
   */
  public static patchConsoleV1GatesByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1GatesByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<PatchConsoleV1GatesByIdOverridesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/overrides',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Update Gate Overrides
   */
  public static postConsoleV1GatesByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1GatesByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdOverridesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/overrides',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Add Gate Rule
   */
  public static postConsoleV1GatesByIdRule<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1GatesByIdRuleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdRuleResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/rule',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Read Gate Rules
   */
  public static getConsoleV1GatesByIdRules<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1GatesByIdRulesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1GatesByIdRulesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/rules',
      ...options,
    })
  }

  /**
   * Update list of current Gate Rules settings
   * Update list of current Gate Rules settings. It does NOT replace, create or delete if you add more rules and remove rules in the rules object. Please get the current rules through GET and use that as the base object.
   */
  public static patchConsoleV1GatesByIdRules<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1GatesByIdRulesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<PatchConsoleV1GatesByIdRulesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/rules',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Add Multiple Gate Rule
   */
  public static postConsoleV1GatesByIdRules<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1GatesByIdRulesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1GatesByIdRulesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/rules',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Gate Rule
   */
  public static deleteConsoleV1GatesByIdRulesByRuleId<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1GatesByIdRulesByRuleIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1GatesByIdRulesByRuleIdResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/rules/{ruleID}',
      ...options,
    })
  }

  /**
   * Update Gate Rules
   * Update all given rules. It does NOT create or delete if you add more rules and remove rules in the rules object.
   */
  public static patchConsoleV1GatesByIdRulesByRuleId<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1GatesByIdRulesByRuleIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1GatesByIdRulesByRuleIdResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/rules/{ruleID}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Pulse Load History (Warehouse Native)
   */
  public static getConsoleV1GatesByIdRulesByRuleIdPulseLoadHistory<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1GatesByIdRulesByRuleIdPulseLoadHistoryData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1GatesByIdRulesByRuleIdPulseLoadHistoryResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/rules/{ruleID}/pulse_load_history',
      ...options,
    })
  }

  /**
   * Retrieve Pulse Results (Beta)
   */
  public static getConsoleV1GatesByIdRulesByRuleIdPulseResults<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1GatesByIdRulesByRuleIdPulseResultsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1GatesByIdRulesByRuleIdPulseResultsResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/rules/{ruleID}/pulse_results',
      ...options,
    })
  }

  /**
   * Unarchive Gate
   */
  public static putConsoleV1GatesByIdUnarchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1GatesByIdUnarchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<PutConsoleV1GatesByIdUnarchiveResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/unarchive',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Gate Versions
   */
  public static getConsoleV1GatesByIdVersions<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1GatesByIdVersionsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1GatesByIdVersionsResponses,
      GetConsoleV1GatesByIdVersionsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/gates/{id}/versions',
      ...options,
    })
  }
}

export class Holdouts {
  /**
   * List Holdouts
   */
  public static getConsoleV1Holdouts<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1HoldoutsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1HoldoutsResponses,
      GetConsoleV1HoldoutsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts',
      ...options,
    })
  }

  /**
   * Create holdout
   */
  public static postConsoleV1Holdouts<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1HoldoutsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1HoldoutsResponses,
      PostConsoleV1HoldoutsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete holdout by id
   */
  public static deleteConsoleV1HoldoutsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1HoldoutsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1HoldoutsByIdResponses,
      DeleteConsoleV1HoldoutsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts/{id}',
      ...options,
    })
  }

  /**
   * Get holdout by id
   */
  public static getConsoleV1HoldoutsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1HoldoutsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1HoldoutsByIdResponses,
      GetConsoleV1HoldoutsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts/{id}',
      ...options,
    })
  }

  /**
   * Patch holdout by id. You can pass in only the data you want to update.
   */
  public static patchConsoleV1HoldoutsById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1HoldoutsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1HoldoutsByIdResponses,
      PatchConsoleV1HoldoutsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Update holdout by id
   */
  public static postConsoleV1HoldoutsById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1HoldoutsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1HoldoutsByIdResponses,
      PostConsoleV1HoldoutsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Remove Holdout Overrides
   * Remove selected ids from an id list
   */
  public static deleteConsoleV1HoldoutsByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1HoldoutsByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1HoldoutsByIdOverridesResponses,
      DeleteConsoleV1HoldoutsByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts/{id}/overrides',
      ...options,
    })
  }

  /**
   * Read Holdout Overrides
   */
  public static getConsoleV1HoldoutsByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1HoldoutsByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1HoldoutsByIdOverridesResponses,
      GetConsoleV1HoldoutsByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts/{id}/overrides',
      ...options,
    })
  }

  /**
   * Add Holdout Overrides
   */
  public static patchConsoleV1HoldoutsByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1HoldoutsByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<PatchConsoleV1HoldoutsByIdOverridesResponses, unknown, ThrowOnError>(
      {
        security: [
          {
            name: 'STATSIG-API-KEY',
            type: 'apiKey',
          },
        ],
        url: '/console/v1/holdouts/{id}/overrides',
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      },
    )
  }

  /**
   * Update Holdout Overrides
   */
  public static postConsoleV1HoldoutsByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1HoldoutsByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1HoldoutsByIdOverridesResponses,
      PostConsoleV1HoldoutsByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts/{id}/overrides',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Retrieve Pulse Results
   */
  public static getConsoleV1HoldoutsByIdPulseResults<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1HoldoutsByIdPulseResultsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1HoldoutsByIdPulseResultsResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/holdouts/{id}/pulse_results',
      ...options,
    })
  }
}

export class Ingestions {
  /**
   * Delete Ingestion Source
   */
  public static deleteConsoleV1Ingestion<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1IngestionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<DeleteConsoleV1IngestionResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion',
      ...options,
    })
  }

  /**
   * Read Ingestion
   */
  public static getConsoleV1Ingestion<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1IngestionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1IngestionResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion',
      ...options,
    })
  }

  /**
   * Update Ingestion Source
   */
  public static patchConsoleV1Ingestion<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1IngestionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<PatchConsoleV1IngestionResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Create Ingestion Source
   */
  public static postConsoleV1Ingestion<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1IngestionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1IngestionResponses,
      PostConsoleV1IngestionErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Backfill Ingestion
   */
  public static postConsoleV1IngestionBackfill<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1IngestionBackfillData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1IngestionBackfillResponses,
      PostConsoleV1IngestionBackfillErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion/backfill',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Create Ingestion Databricks
   */
  public static postConsoleV1IngestionConnectionDatabricks<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1IngestionConnectionDatabricksData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1IngestionConnectionDatabricksResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion/connection/databricks',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Get Ingestion Event Count
   */
  public static getConsoleV1IngestionEventsCount<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1IngestionEventsCountData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1IngestionEventsCountResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion/events/count',
      ...options,
    })
  }

  /**
   * Get Ingestion Event Delta Ledger
   */
  public static getConsoleV1IngestionEventsDelta<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1IngestionEventsDeltaData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1IngestionEventsDeltaResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion/events/delta',
      ...options,
    })
  }

  /**
   * List Ingestion Runs
   */
  public static getConsoleV1IngestionRuns<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1IngestionRunsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1IngestionRunsResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion/runs',
      ...options,
    })
  }

  /**
   * Read Ingestion Run
   */
  public static getConsoleV1IngestionRunsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1IngestionRunsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1IngestionRunsByIdResponses,
      GetConsoleV1IngestionRunsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion/runs/{id}',
      ...options,
    })
  }

  /**
   * Read Ingestion Schedule
   */
  public static getConsoleV1IngestionSchedule<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1IngestionScheduleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1IngestionScheduleResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion/schedule',
      ...options,
    })
  }

  /**
   * Update Ingestion Schedule
   */
  public static postConsoleV1IngestionSchedule<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1IngestionScheduleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1IngestionScheduleResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion/schedule',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Ingestions Status
   */
  public static getConsoleV1IngestionStatus<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1IngestionStatusData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1IngestionStatusResponses,
      GetConsoleV1IngestionStatusErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/ingestion/status',
      ...options,
    })
  }
}

export class Keys {
  /**
   * List Keys
   */
  public static getConsoleV1Keys<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1KeysData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1KeysResponses, GetConsoleV1KeysErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/keys',
      ...options,
    })
  }

  /**
   * Create Key
   */
  public static postConsoleV1Keys<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1KeysData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1KeysResponses, PostConsoleV1KeysErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/keys',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Key
   */
  public static deleteConsoleV1KeysById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1KeysByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1KeysByIdResponses,
      DeleteConsoleV1KeysByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/keys/{id}',
      ...options,
    })
  }

  /**
   * Read Key
   */
  public static getConsoleV1KeysById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1KeysByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1KeysByIdResponses,
      GetConsoleV1KeysByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/keys/{id}',
      ...options,
    })
  }

  /**
   * Update Key
   */
  public static patchConsoleV1KeysById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1KeysByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1KeysByIdResponses,
      PatchConsoleV1KeysByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/keys/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Deactivate Key
   */
  public static patchConsoleV1KeysByIdDeactivate<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1KeysByIdDeactivateData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1KeysByIdDeactivateResponses,
      PatchConsoleV1KeysByIdDeactivateErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/keys/{id}/deactivate',
      ...options,
    })
  }

  /**
   * Rotate Key
   */
  public static patchConsoleV1KeysByIdRotate<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1KeysByIdRotateData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1KeysByIdRotateResponses,
      PatchConsoleV1KeysByIdRotateErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/keys/{id}/rotate',
      ...options,
    })
  }
}

export class Layers {
  /**
   * Get Layers
   */
  public static getConsoleV1Layers<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1LayersData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1LayersResponses, GetConsoleV1LayersErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers',
      ...options,
    })
  }

  /**
   * Create a Layer
   */
  public static postConsoleV1Layers<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1LayersData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1LayersResponses,
      PostConsoleV1LayersErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete a layer
   */
  public static deleteConsoleV1LayersById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1LayersByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1LayersByIdResponses,
      DeleteConsoleV1LayersByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}',
      ...options,
    })
  }

  /**
   * Get one layer
   */
  public static getConsoleV1LayersById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1LayersByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1LayersByIdResponses,
      GetConsoleV1LayersByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}',
      ...options,
    })
  }

  /**
   * Partially update a layer
   */
  public static patchConsoleV1LayersById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1LayersByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1LayersByIdResponses,
      PatchConsoleV1LayersByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Update a layer
   */
  public static postConsoleV1LayersById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1LayersByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1LayersByIdResponses,
      PostConsoleV1LayersByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Lineage: List Experiment related to Layer
   */
  public static getConsoleV1LayersByIdExperiments<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1LayersByIdExperimentsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1LayersByIdExperimentsResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}/experiments',
      ...options,
    })
  }

  /**
   * Delete Layer Overrides
   */
  public static deleteConsoleV1LayersByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1LayersByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1LayersByIdOverridesResponses,
      DeleteConsoleV1LayersByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}/overrides',
      ...options,
    })
  }

  /**
   * Get Layer Overrides
   */
  public static getConsoleV1LayersByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1LayersByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1LayersByIdOverridesResponses,
      GetConsoleV1LayersByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}/overrides',
      ...options,
    })
  }

  /**
   * Add Layer Overrides
   */
  public static patchConsoleV1LayersByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1LayersByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1LayersByIdOverridesResponses,
      PatchConsoleV1LayersByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}/overrides',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Update Layer Overrides
   */
  public static postConsoleV1LayersByIdOverrides<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1LayersByIdOverridesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1LayersByIdOverridesResponses,
      PostConsoleV1LayersByIdOverridesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/layers/{id}/overrides',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class Metrics {
  /**
   * Read Single Metric Value
   */
  public static getConsoleV1Metrics<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1MetricsResponses, GetConsoleV1MetricsErrors, ThrowOnError>(
      {
        security: [
          {
            name: 'STATSIG-API-KEY',
            type: 'apiKey',
          },
        ],
        url: '/console/v1/metrics',
        ...options,
      },
    )
  }

  /**
   * Create Metric
   */
  public static postConsoleV1Metrics<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsResponses,
      PostConsoleV1MetricsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete a metric
   */
  public static deleteConsoleV1MetricsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1MetricsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1MetricsByIdResponses,
      DeleteConsoleV1MetricsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}',
      ...options,
    })
  }

  /**
   * Read Metric Definition
   */
  public static getConsoleV1MetricsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1MetricsByIdResponses,
      GetConsoleV1MetricsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}',
      ...options,
    })
  }

  /**
   * Update a metric
   */
  public static postConsoleV1MetricsById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsByIdResponses,
      PostConsoleV1MetricsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Cancel archive a metric
   */
  public static putConsoleV1MetricsByIdCancelArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1MetricsByIdCancelArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1MetricsByIdCancelArchiveResponses,
      PutConsoleV1MetricsByIdCancelArchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/cancel_archive',
      ...options,
    })
  }

  /**
   * Lineage: List experiments related to Metric
   */
  public static getConsoleV1MetricsByIdExperiments<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsByIdExperimentsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1MetricsByIdExperimentsResponses,
      GetConsoleV1MetricsByIdExperimentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/experiments',
      ...options,
    })
  }

  /**
   * Schedule a metric archive
   */
  public static putConsoleV1MetricsByIdScheduleArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1MetricsByIdScheduleArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1MetricsByIdScheduleArchiveResponses,
      PutConsoleV1MetricsByIdScheduleArchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/schedule_archive',
      ...options,
    })
  }

  /**
   * Unarchive a metric
   */
  public static putConsoleV1MetricsByIdUnarchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1MetricsByIdUnarchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1MetricsByIdUnarchiveResponses,
      PutConsoleV1MetricsByIdUnarchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/unarchive',
      ...options,
    })
  }

  /**
   * List all Metrics
   */
  public static getConsoleV1MetricsList<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1MetricsListData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1MetricsListResponses,
      GetConsoleV1MetricsListErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/list',
      ...options,
    })
  }

  /**
   * List All Metric Values
   * List all metric values
   */
  public static getConsoleV1MetricsValues<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsValuesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1MetricsValuesResponses,
      GetConsoleV1MetricsValuesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/values',
      ...options,
    })
  }
}

export class MetricsWarehouseNative {
  /**
   * Reload metric data
   */
  public static postConsoleV1MetricsByIdReload<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsByIdReloadData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsByIdReloadResponses,
      PostConsoleV1MetricsByIdReloadErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/{id}/reload',
      ...options,
    })
  }

  /**
   * Create Metric Source
   */
  public static postConsoleV1MetricsMetricSource<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsMetricSourceData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsMetricSourceResponses,
      PostConsoleV1MetricsMetricSourceErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Metric Source
   */
  public static deleteConsoleV1MetricsMetricSourceByName<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1MetricsMetricSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1MetricsMetricSourceByNameResponses,
      DeleteConsoleV1MetricsMetricSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/{name}',
      ...options,
    })
  }

  /**
   * Read Metric Source
   */
  public static getConsoleV1MetricsMetricSourceByName<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsMetricSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1MetricsMetricSourceByNameResponses,
      GetConsoleV1MetricsMetricSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/{name}',
      ...options,
    })
  }

  /**
   * Update Metric Source
   */
  public static postConsoleV1MetricsMetricSourceByName<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1MetricsMetricSourceByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1MetricsMetricSourceByNameResponses,
      PostConsoleV1MetricsMetricSourceByNameErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Read Metric Source Metrics
   */
  public static getConsoleV1MetricsMetricSourceByNameMetrics<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1MetricsMetricSourceByNameMetricsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1MetricsMetricSourceByNameMetricsResponses,
      GetConsoleV1MetricsMetricSourceByNameMetricsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/{name}/metrics',
      ...options,
    })
  }

  /**
   * List metric source
   */
  public static getConsoleV1MetricsMetricSourceList<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1MetricsMetricSourceListData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1MetricsMetricSourceListResponses,
      GetConsoleV1MetricsMetricSourceListErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/metrics/metric_source/list',
      ...options,
    })
  }
}

export class ParamStore {
  /**
   * List Param Stores
   */
  public static getConsoleV1ParamStores<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ParamStoresData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1ParamStoresResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/param_stores',
      ...options,
    })
  }

  /**
   * Create Param Store
   */
  public static postConsoleV1ParamStores<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ParamStoresData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1ParamStoresResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/param_stores',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Get Param Store
   */
  public static getConsoleV1ParamStoresByName<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ParamStoresByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1ParamStoresByNameResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/param_stores/{name}',
      ...options,
    })
  }

  /**
   * Update Param Store
   */
  public static postConsoleV1ParamStoresByName<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ParamStoresByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1ParamStoresByNameResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/param_stores/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class Project {
  /**
   * Get Project Info
   */
  public static getConsoleV1Project<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ProjectData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1ProjectResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/project',
      ...options,
    })
  }
}

export class Usage {
  /**
   * Get Report in CSV format
   */
  public static getConsoleV1ProjectUsageBillingReport<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ProjectUsageBillingReportData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ProjectUsageBillingReportResponses,
      GetConsoleV1ProjectUsageBillingReportErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/project/usage_billing/report',
      ...options,
    })
  }
}

export class ReleasePipelineTriggers {
  /**
   * List Pipeline Triggers
   */
  public static getConsoleV1ReleasePipelineTriggers<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ReleasePipelineTriggersData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1ReleasePipelineTriggersResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers',
      ...options,
    })
  }

  /**
   * Get Pipeline Trigger
   */
  public static getConsoleV1ReleasePipelineTriggersById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ReleasePipelineTriggersByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1ReleasePipelineTriggersByIdResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}',
      ...options,
    })
  }

  /**
   * Abort Pipeline Trigger
   */
  public static putConsoleV1ReleasePipelineTriggersByIdAbort<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ReleasePipelineTriggersByIdAbortData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ReleasePipelineTriggersByIdAbortResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}/abort',
      ...options,
    })
  }

  /**
   * Approve Pipeline Trigger Phase
   */
  public static putConsoleV1ReleasePipelineTriggersByIdApprove<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ReleasePipelineTriggersByIdApproveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ReleasePipelineTriggersByIdApproveResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}/approve',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Pause Pipeline Trigger
   */
  public static putConsoleV1ReleasePipelineTriggersByIdPause<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ReleasePipelineTriggersByIdPauseData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ReleasePipelineTriggersByIdPauseResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}/pause',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Fully Roll Out Pipeline Trigger
   */
  public static putConsoleV1ReleasePipelineTriggersByIdRollout<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ReleasePipelineTriggersByIdRolloutData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ReleasePipelineTriggersByIdRolloutResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}/rollout',
      ...options,
    })
  }

  /**
   * Skip to Pipeline Trigger Phase
   */
  public static putConsoleV1ReleasePipelineTriggersByIdSkip<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ReleasePipelineTriggersByIdSkipData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ReleasePipelineTriggersByIdSkipResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}/skip',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Unpause Pipeline Trigger
   */
  public static putConsoleV1ReleasePipelineTriggersByIdUnpause<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1ReleasePipelineTriggersByIdUnpauseData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1ReleasePipelineTriggersByIdUnpauseResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipeline_triggers/{id}/unpause',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class ReleasePipelines {
  /**
   * List Pipelines
   */
  public static getConsoleV1ReleasePipelines<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1ReleasePipelinesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1ReleasePipelinesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipelines',
      ...options,
    })
  }

  /**
   * Create Pipeline
   */
  public static postConsoleV1ReleasePipelines<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ReleasePipelinesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1ReleasePipelinesResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipelines',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Pipeline
   */
  public static deleteConsoleV1ReleasePipelinesById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1ReleasePipelinesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1ReleasePipelinesByIdResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipelines/{id}',
      ...options,
    })
  }

  /**
   * Get Pipeline
   */
  public static getConsoleV1ReleasePipelinesById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ReleasePipelinesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1ReleasePipelinesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipelines/{id}',
      ...options,
    })
  }

  /**
   * Update Pipeline
   */
  public static postConsoleV1ReleasePipelinesById<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1ReleasePipelinesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1ReleasePipelinesByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/release_pipelines/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class Reports {
  /**
   * Get Reports
   */
  public static getConsoleV1Reports<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1ReportsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1ReportsResponses, GetConsoleV1ReportsErrors, ThrowOnError>(
      {
        security: [
          {
            name: 'STATSIG-API-KEY',
            type: 'apiKey',
          },
        ],
        url: '/console/v1/reports',
        ...options,
      },
    )
  }
}

export class Roles {
  /**
   * List Roles
   */
  public static getConsoleV1Roles<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1RolesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1RolesResponses, GetConsoleV1RolesErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/roles',
      ...options,
    })
  }

  /**
   * Create Role
   */
  public static postConsoleV1Roles<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1RolesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1RolesResponses, PostConsoleV1RolesErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/roles',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Role
   */
  public static deleteConsoleV1RolesById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1RolesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1RolesByIdResponses,
      DeleteConsoleV1RolesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/roles/{id}',
      ...options,
    })
  }

  /**
   * Get Role
   */
  public static getConsoleV1RolesById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1RolesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1RolesByIdResponses,
      GetConsoleV1RolesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/roles/{id}',
      ...options,
    })
  }

  /**
   * Update Role
   */
  public static patchConsoleV1RolesById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1RolesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1RolesByIdResponses,
      PatchConsoleV1RolesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/roles/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class Segments {
  /**
   * List Segments
   */
  public static getConsoleV1Segments<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1SegmentsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1SegmentsResponses,
      GetConsoleV1SegmentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments',
      ...options,
    })
  }

  /**
   * Create Segment
   */
  public static postConsoleV1Segments<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1SegmentsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1SegmentsResponses,
      PostConsoleV1SegmentsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Segment
   */
  public static deleteConsoleV1SegmentsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1SegmentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1SegmentsByIdResponses,
      DeleteConsoleV1SegmentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}',
      ...options,
    })
  }

  /**
   * Get Segment
   */
  public static getConsoleV1SegmentsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1SegmentsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1SegmentsByIdResponses,
      GetConsoleV1SegmentsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}',
      ...options,
    })
  }

  /**
   * Add IDs to User Store ID List
   * This endpoint has a limit of 1000 ids per request
   */
  public static patchConsoleV1SegmentsByIdAddIds<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1SegmentsByIdAddIdsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1SegmentsByIdAddIdsResponses,
      PatchConsoleV1SegmentsByIdAddIdsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}/add_ids',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Archive Segment
   */
  public static putConsoleV1SegmentsByIdArchive<ThrowOnError extends boolean = false>(
    options: Options<PutConsoleV1SegmentsByIdArchiveData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      PutConsoleV1SegmentsByIdArchiveResponses,
      PutConsoleV1SegmentsByIdArchiveErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}/archive',
      ...options,
    })
  }

  /**
   * Update Segment Rules
   */
  public static postConsoleV1SegmentsByIdConditional<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1SegmentsByIdConditionalData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1SegmentsByIdConditionalResponses,
      PostConsoleV1SegmentsByIdConditionalErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}/conditional',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Remove IDs from Segment
   * This endpoint is rate limited to 900 requests /15m or 12 requests /10s.
   */
  public static deleteConsoleV1SegmentsByIdIdList<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1SegmentsByIdIdListData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1SegmentsByIdIdListResponses,
      DeleteConsoleV1SegmentsByIdIdListErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}/id_list',
      ...options,
    })
  }

  /**
   * Get IDs in a Segment
   * This endpoint is rate limited to 100
   */
  public static getConsoleV1SegmentsByIdIdList<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1SegmentsByIdIdListData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<GetConsoleV1SegmentsByIdIdListResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}/id_list',
      ...options,
    })
  }

  /**
   * Add IDs to Segment
   * This endpoint is rate limited to 900 requests /15m or 12 requests /10s.
   */
  public static patchConsoleV1SegmentsByIdIdList<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1SegmentsByIdIdListData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1SegmentsByIdIdListResponses,
      PatchConsoleV1SegmentsByIdIdListErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}/id_list',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Reset ID List Segment
   * Warning: Not atomic for big ID lists (> 1000)
   */
  public static postConsoleV1SegmentsByIdIdListReset<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1SegmentsByIdIdListResetData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1SegmentsByIdIdListResetResponses, unknown, ThrowOnError>(
      {
        security: [
          {
            name: 'STATSIG-API-KEY',
            type: 'apiKey',
          },
        ],
        url: '/console/v1/segments/{id}/id_list/reset',
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      },
    )
  }

  /**
   * Get ID List Metadata
   * This endpoint gets the metadata of the ID List.
   */
  public static getConsoleV1SegmentsByIdIdlistMetadata<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1SegmentsByIdIdlistMetadataData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1SegmentsByIdIdlistMetadataResponses,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}/idlist_metadata',
      ...options,
    })
  }

  /**
   * Remove IDs from User Store ID List
   * This endpoint has a limit of 1000 ids per request
   */
  public static patchConsoleV1SegmentsByIdRemoveIds<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1SegmentsByIdRemoveIdsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1SegmentsByIdRemoveIdsResponses,
      PatchConsoleV1SegmentsByIdRemoveIdsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/segments/{id}/remove_ids',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class Settings {
  /**
   * Get Project Settings
   */
  public static getConsoleV1SettingsProject<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1SettingsProjectData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1SettingsProjectResponses,
      GetConsoleV1SettingsProjectErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/settings/project',
      ...options,
    })
  }

  /**
   * Update Project Settings
   */
  public static postConsoleV1SettingsProject<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1SettingsProjectData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1SettingsProjectResponses,
      PostConsoleV1SettingsProjectErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/settings/project',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Get Reviews Settings
   */
  public static getConsoleV1SettingsReviews<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1SettingsReviewsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1SettingsReviewsResponses,
      GetConsoleV1SettingsReviewsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/settings/reviews',
      ...options,
    })
  }

  /**
   * Update Reviews Settings
   */
  public static postConsoleV1SettingsReviews<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1SettingsReviewsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1SettingsReviewsResponses,
      PostConsoleV1SettingsReviewsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/settings/reviews',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Get Roles Settings
   */
  public static getConsoleV1SettingsRoles<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1SettingsRolesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1SettingsRolesResponses,
      GetConsoleV1SettingsRolesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/settings/roles',
      ...options,
    })
  }

  /**
   * Update Roles Settings
   */
  public static postConsoleV1SettingsRoles<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1SettingsRolesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1SettingsRolesResponses,
      PostConsoleV1SettingsRolesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/settings/roles',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Get Teams Settings
   */
  public static getConsoleV1SettingsTeams<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1SettingsTeamsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1SettingsTeamsResponses,
      GetConsoleV1SettingsTeamsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/settings/teams',
      ...options,
    })
  }

  /**
   * Update Teams Settings
   */
  public static postConsoleV1SettingsTeams<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1SettingsTeamsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1SettingsTeamsResponses,
      PostConsoleV1SettingsTeamsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/settings/teams',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class Tags {
  /**
   * List Tags
   */
  public static getConsoleV1Tags<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1TagsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1TagsResponses, GetConsoleV1TagsErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags',
      ...options,
    })
  }

  /**
   * Create Tag
   */
  public static postConsoleV1Tags<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1TagsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1TagsResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Tag
   */
  public static deleteConsoleV1TagsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1TagsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<DeleteConsoleV1TagsByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags/{id}',
      ...options,
    })
  }

  /**
   * Read Tag
   */
  public static getConsoleV1TagsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1TagsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1TagsByIdResponses,
      GetConsoleV1TagsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags/{id}',
      ...options,
    })
  }

  /**
   * Update Tag
   */
  public static patchConsoleV1TagsById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1TagsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<PatchConsoleV1TagsByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/tags/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class TargetApp {
  /**
   * List Target Apps
   */
  public static getConsoleV1TargetApp<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1TargetAppData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1TargetAppResponses,
      GetConsoleV1TargetAppErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/target_app',
      ...options,
    })
  }

  /**
   * Bulk Assign Target Apps
   */
  public static patchConsoleV1TargetApp<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1TargetAppData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1TargetAppResponses,
      PatchConsoleV1TargetAppErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/target_app',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Create Target App
   */
  public static postConsoleV1TargetApp<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1TargetAppData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<PostConsoleV1TargetAppResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/target_app',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Target App
   */
  public static deleteConsoleV1TargetAppById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1TargetAppByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<DeleteConsoleV1TargetAppByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/target_app/{id}',
      ...options,
    })
  }

  /**
   * Read Target App
   */
  public static getConsoleV1TargetAppById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1TargetAppByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1TargetAppByIdResponses,
      GetConsoleV1TargetAppByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/target_app/{id}',
      ...options,
    })
  }

  /**
   * Update Target App
   */
  public static patchConsoleV1TargetAppById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1TargetAppByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1TargetAppByIdResponses,
      PatchConsoleV1TargetAppByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/target_app/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class UnitIdTypes {
  /**
   * List Unit ID Types
   */
  public static getConsoleV1UnitIdTypes<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1UnitIdTypesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1UnitIdTypesResponses,
      GetConsoleV1UnitIdTypesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/unit_id_types',
      ...options,
    })
  }

  /**
   * Create Unit ID Type
   */
  public static postConsoleV1UnitIdTypes<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1UnitIdTypesData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1UnitIdTypesResponses,
      PostConsoleV1UnitIdTypesErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/unit_id_types',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Unit ID Type
   */
  public static deleteConsoleV1UnitIdTypesById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1UnitIdTypesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteConsoleV1UnitIdTypesByIdResponses,
      DeleteConsoleV1UnitIdTypesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/unit_id_types/{id}',
      ...options,
    })
  }

  /**
   * Get Unit ID Type
   */
  public static getConsoleV1UnitIdTypesById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1UnitIdTypesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1UnitIdTypesByIdResponses,
      GetConsoleV1UnitIdTypesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/unit_id_types/{id}',
      ...options,
    })
  }

  /**
   * Update Unit ID Type
   */
  public static patchConsoleV1UnitIdTypesById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1UnitIdTypesByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1UnitIdTypesByIdResponses,
      PatchConsoleV1UnitIdTypesByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/unit_id_types/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class Users {
  /**
   * List Users
   */
  public static getConsoleV1Users<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1UsersData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<GetConsoleV1UsersResponses, GetConsoleV1UsersErrors, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users',
      ...options,
    })
  }

  /**
   * Get user by email
   */
  public static getConsoleV1UsersByEmail<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1UsersByEmailData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1UsersByEmailResponses,
      GetConsoleV1UsersByEmailErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/{email}',
      ...options,
    })
  }

  /**
   * Update user
   */
  public static postConsoleV1UsersByEmail<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1UsersByEmailData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1UsersByEmailResponses,
      PostConsoleV1UsersByEmailErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/{email}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Invite user. To avoid spamming, invitation emails are not sent. Invitee will see invitation notification in-app after logging in.
   */
  public static postConsoleV1UsersInvite<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1UsersInviteData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1UsersInviteResponses,
      PostConsoleV1UsersInviteErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/invite',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * List Teams
   */
  public static getConsoleV1UsersTeams<ThrowOnError extends boolean = false>(
    options?: Options<GetConsoleV1UsersTeamsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetConsoleV1UsersTeamsResponses,
      GetConsoleV1UsersTeamsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams',
      ...options,
    })
  }

  /**
   * Create Team
   */
  public static postConsoleV1UsersTeams<ThrowOnError extends boolean = false>(
    options: Options<PostConsoleV1UsersTeamsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PostConsoleV1UsersTeamsResponses,
      PostConsoleV1UsersTeamsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }

  /**
   * Delete Team
   */
  public static deleteConsoleV1UsersTeamsById<ThrowOnError extends boolean = false>(
    options: Options<DeleteConsoleV1UsersTeamsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<DeleteConsoleV1UsersTeamsByIdResponses, unknown, ThrowOnError>({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams/{id}',
      ...options,
    })
  }

  /**
   * Get Team
   */
  public static getConsoleV1UsersTeamsById<ThrowOnError extends boolean = false>(
    options: Options<GetConsoleV1UsersTeamsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetConsoleV1UsersTeamsByIdResponses,
      GetConsoleV1UsersTeamsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams/{id}',
      ...options,
    })
  }

  /**
   * Update Team. Ops: Replace. Use GET for current data if you intent to Add.
   */
  public static patchConsoleV1UsersTeamsById<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1UsersTeamsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1UsersTeamsByIdResponses,
      PatchConsoleV1UsersTeamsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/users/teams/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}

export class WarehouseConnections {
  /**
   * Update Warehouse Connection Parameters
   */
  public static patchConsoleV1WhConnections<ThrowOnError extends boolean = false>(
    options: Options<PatchConsoleV1WhConnectionsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchConsoleV1WhConnectionsResponses,
      PatchConsoleV1WhConnectionsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'STATSIG-API-KEY',
          type: 'apiKey',
        },
      ],
      url: '/console/v1/wh_connections',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    })
  }
}
