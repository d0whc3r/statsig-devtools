name: 'CI - Main Branch'

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      run-e2e-tests:
        description: 'Run E2E tests'
        required: false
        default: true
        type: boolean
      create-release:
        description: 'Create release artifacts'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '22'

permissions:
  contents: write # Required for semantic-release to create releases and push commits
  issues: write # Required for semantic-release to comment on issues
  pull-requests: write # Required for semantic-release to comment on PRs

jobs:
  # Setup and dependency installation
  setup:
    name: 'Setup & Dependencies'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: ${{ env.NODE_VERSION }}

  # Quality checks (lint, format, type-check)
  quality-checks:
    name: 'Quality Checks'
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run quality checks
        uses: ./.github/actions/quality-checks

  # Unit tests with coverage
  unit-tests:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run tests
        uses: ./.github/actions/run-tests
        with:
          run-unit-tests: 'true'
          run-e2e-tests: 'false'
          upload-coverage: 'true'

  # Build extensions
  build:
    name: 'Build Extensions'
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build extensions
        uses: ./.github/actions/build-extensions
        with:
          build-chrome: 'true'
          build-firefox: 'true'
          upload-artifacts: 'true'

  # E2E tests (disabled - requires complex CI setup with Xvfb, etc.)
  # TODO: Enable when proper headless browser setup is configured
  # e2e-tests:
  #   name: 'E2E Tests'
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: |
  #     github.event_name == 'workflow_dispatch' &&
  #     github.event.inputs.run-e2e-tests == 'true'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js and dependencies
  #       uses: ./.github/actions/setup-node-deps
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #
  #     - name: Run E2E tests
  #       uses: ./.github/actions/run-tests
  #       with:
  #         run-unit-tests: 'false'
  #         run-e2e-tests: 'true'

  # Semantic Release - Version bump and release
  semantic-release:
    name: 'Semantic Release'
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      always() &&
      needs.build.result == 'success' &&
      github.event_name == 'push'
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build extensions for release
        uses: ./.github/actions/build-extensions
        with:
          build-chrome: 'true'
          build-firefox: 'true'
          upload-artifacts: 'false'

      - name: Create release packages
        uses: ./.github/actions/create-release-artifacts
        with:
          create-chrome-zip: 'true'
          create-firefox-zip: 'true'

      - name: Run Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Running semantic release..."
          npx semantic-release
          echo "‚úÖ Semantic release completed"

  # Manual release artifacts (for workflow_dispatch)
  manual-release-artifacts:
    name: 'Manual Release Artifacts'
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      always() &&
      needs.build.result == 'success' &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.create-release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build extensions for release
        uses: ./.github/actions/build-extensions
        with:
          build-chrome: 'true'
          build-firefox: 'true'
          upload-artifacts: 'false'

      - name: Create release packages
        uses: ./.github/actions/create-release-artifacts
        with:
          create-chrome-zip: 'true'
          create-firefox-zip: 'true'

  # Security scan (optional)
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level=moderate
          echo "‚úÖ Security audit completed"

  # Final status check
  ci-success:
    name: 'CI Success'
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, build, semantic-release, manual-release-artifacts]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "üìä Job Results Summary:"
          echo "  - Quality Checks: ${{ needs.quality-checks.result }}"
          echo "  - Unit Tests: ${{ needs.unit-tests.result }}"
          echo "  - Build: ${{ needs.build.result }}"
          echo "  - Semantic Release: ${{ needs.semantic-release.result }}"
          echo "  - Manual Release: ${{ needs.manual-release-artifacts.result }}"

          # Check critical jobs
          if [ "${{ needs.quality-checks.result }}" != "success" ] ||
             [ "${{ needs.unit-tests.result }}" != "success" ] ||
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå Critical CI jobs failed"
            exit 1
          fi

          # Show release info if available
          if [ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]; then
            echo "üéâ New release published: v${{ needs.semantic-release.outputs.new-release-version }}"
          else
            echo "‚ÑπÔ∏è No new release (no qualifying commits)"
          fi

          echo "‚úÖ All CI jobs completed successfully"
