name: 'Create Release Artifacts'
description: 'Create ZIP packages for Chrome and Firefox store submission'

inputs:
  create-chrome-zip:
    description: 'Create Chrome Web Store ZIP'
    required: false
    default: 'true'
  create-firefox-zip:
    description: 'Create Firefox Add-ons ZIP'
    required: false
    default: 'true'
  version:
    description: 'Version for artifact naming'
    required: false
    default: ''

outputs:
  chrome-zip-path:
    description: 'Path to Chrome ZIP file'
    value: ${{ steps.paths.outputs.chrome-zip }}
  firefox-zip-path:
    description: 'Path to Firefox ZIP file'
    value: ${{ steps.paths.outputs.firefox-zip }}
  firefox-sources-zip-path:
    description: 'Path to Firefox sources ZIP file'
    value: ${{ steps.paths.outputs.firefox-sources-zip }}

runs:
  using: 'composite'
  steps:
    - name: Get version from package.json
      id: version
      shell: bash
      run: |
        if [ -n "${{ inputs.version }}" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION=$(node -p "require('./package.json').version")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üì¶ Version: $VERSION"

    - name: Create Chrome Web Store ZIP
      if: inputs.create-chrome-zip == 'true'
      shell: bash
      run: |
        echo "üì¶ Creating Chrome Web Store ZIP..."
        npm run zip
        echo "‚úÖ Chrome ZIP created"

    - name: Create Firefox Add-ons ZIP
      if: inputs.create-firefox-zip == 'true'
      shell: bash
      run: |
        echo "ü¶ä Creating Firefox Add-ons ZIP..."
        npm run zip:firefox
        echo "‚úÖ Firefox ZIP created"

    - name: Create Firefox sources ZIP
      if: inputs.create-firefox-zip == 'true'
      shell: bash
      run: |
        echo "üì¶ Creating Firefox sources ZIP..."
        VERSION="${{ steps.version.outputs.version }}"
        EXTENSION_NAME=$(node -p "require('./package.json').name")
        SOURCES_ZIP=".output/$EXTENSION_NAME-$VERSION-firefox-sources.zip"

        # Create sources ZIP excluding build outputs and unnecessary files
        zip -r "$SOURCES_ZIP" . \
          -x "node_modules/*" \
          -x ".output/*" \
          -x ".git/*" \
          -x "coverage/*" \
          -x "test-results/*" \
          -x "playwright-report/*" \
          -x "*.log" \
          -x ".DS_Store" \
          -x "*.map"

        echo "‚úÖ Firefox sources ZIP created: $SOURCES_ZIP"

    - name: Set output paths
      id: paths
      shell: bash
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        EXTENSION_NAME=$(node -p "require('./package.json').name")
        if [ "${{ inputs.create-chrome-zip }}" == "true" ]; then
          CHROME_ZIP=".output/$EXTENSION_NAME-$VERSION-chrome.zip"
          echo "chrome-zip=$CHROME_ZIP" >> $GITHUB_OUTPUT
        fi
        if [ "${{ inputs.create-firefox-zip }}" == "true" ]; then
          FIREFOX_ZIP=".output/$EXTENSION_NAME-$VERSION-firefox.zip"
          FIREFOX_SOURCES_ZIP=".output/$EXTENSION_NAME-$VERSION-firefox-sources.zip"
          echo "firefox-zip=$FIREFOX_ZIP" >> $GITHUB_OUTPUT
          echo "firefox-sources-zip=$FIREFOX_SOURCES_ZIP" >> $GITHUB_OUTPUT
        fi

    - name: Verify ZIP files
      shell: bash
      run: |
        echo "üìÅ Verifying ZIP files..."
        if [ "${{ inputs.create-chrome-zip }}" == "true" ]; then
          CHROME_ZIP="${{ steps.paths.outputs.chrome-zip }}"
          if [ -f "$CHROME_ZIP" ]; then
            echo "‚úÖ Chrome ZIP: $CHROME_ZIP ($(du -h "$CHROME_ZIP" | cut -f1))"
            unzip -l "$CHROME_ZIP" | head -20
          else
            echo "‚ùå Chrome ZIP not found: $CHROME_ZIP"
            exit 1
          fi
        fi

        if [ "${{ inputs.create-firefox-zip }}" == "true" ]; then
          FIREFOX_ZIP="${{ steps.paths.outputs.firefox-zip }}"
          FIREFOX_SOURCES_ZIP="${{ steps.paths.outputs.firefox-sources-zip }}"
          
          if [ -f "$FIREFOX_ZIP" ]; then
            echo "‚úÖ Firefox ZIP: $FIREFOX_ZIP ($(du -h "$FIREFOX_ZIP" | cut -f1))"
            unzip -l "$FIREFOX_ZIP" | head -20
          else
            echo "‚ùå Firefox ZIP not found: $FIREFOX_ZIP"
            exit 1
          fi
          
          if [ -f "$FIREFOX_SOURCES_ZIP" ]; then
            echo "‚úÖ Firefox sources ZIP: $FIREFOX_SOURCES_ZIP ($(du -h "$FIREFOX_SOURCES_ZIP" | cut -f1))"
          else
            echo "‚ùå Firefox sources ZIP not found: $FIREFOX_SOURCES_ZIP"
            exit 1
          fi
        fi

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-v${{ steps.version.outputs.version }}
        path: |
          .output/*.zip
        retention-days: 90

    - name: Release artifacts summary
      shell: bash
      run: |
        echo "üì¶ Release Artifacts Summary:"
        echo "  - Version: ${{ steps.version.outputs.version }}"
        echo "  - Chrome ZIP: ${{ inputs.create-chrome-zip == 'true' && '‚úÖ Created' || '‚è≠Ô∏è Skipped' }}"
        echo "  - Firefox ZIP: ${{ inputs.create-firefox-zip == 'true' && '‚úÖ Created' || '‚è≠Ô∏è Skipped' }}"
        echo "  - Firefox Sources ZIP: ${{ inputs.create-firefox-zip == 'true' && '‚úÖ Created' || '‚è≠Ô∏è Skipped' }}"
