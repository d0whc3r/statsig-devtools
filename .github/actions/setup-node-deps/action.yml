name: 'Setup Node.js and Dependencies'
description: 'Setup Node.js environment and install dependencies with caching'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22'
  cache-dependency-path:
    description: 'Path to package-lock.json for cache key'
    required: false
    default: 'package-lock.json'

outputs:
  cache-hit:
    description: 'Whether dependencies were restored from cache'
    value: ${{ steps.cache-deps.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ inputs.cache-dependency-path }}

    - name: Cache node_modules
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ inputs.node-version }}-${{ hashFiles(inputs.cache-dependency-path) }}
        restore-keys: |
          ${{ runner.os }}-node-${{ inputs.node-version }}-
          ${{ runner.os }}-node-

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
      run: npm ci --prefer-offline --no-audit

    - name: Run WXT prepare
      shell: bash
      run: |
        echo "üîß Running WXT prepare to generate required files..."
        npm run postinstall
        echo "‚úÖ WXT prepare completed"

    - name: Verify installation
      shell: bash
      run: |
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "Dependencies installed successfully"
        if [ -f ".wxt/tsconfig.json" ]; then
          echo "‚úÖ WXT configuration files generated"
        else
          echo "‚ö†Ô∏è WXT configuration files not found"
        fi
